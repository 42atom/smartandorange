// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: Y7xcku1e2QoFP
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { useDependencyAwareQuery } from "@plasmicapp/react-web/lib/data-sources";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavMenu from "../../NavMenu"; // plasmic-import: 9cR2sxpykRjad/component
import Button from "../../Button"; // plasmic-import: YO5Bwb9purCqu/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: EYHwZh9ILg/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponent
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponentHelper
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal"; // plasmic-import: xx93QbkHH5i/codeComponent
import { RichTable } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponent
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponentHelper
import Toolbar from "../../Toolbar"; // plasmic-import: UlyQXoohOO/component
import { useScreenVariants as useScreenVariantsnl9I0Oib3VOwY } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nl9_I0oib3VOwY/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicMyaccount.module.css"; // plasmic-import: Y7xcku1e2QoFP/css
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: iQ4dltXyU_/icon

export const PlasmicMyaccount__VariantProps = new Array();

export const PlasmicMyaccount__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMyaccount__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "inputNickanme.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "小黄帽"
      },
      {
        path: "inputEmail.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "inputMob.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "presentCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "345678"
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  useDependencyAwareQuery({
    name: "orders",
    getDataOp: () => ({
      sourceId: "9m6seF9rffTwqmNeTPj4dy",
      opId: "9ebbdd1e-6da3-41b6-a2f9-347d2925f70d",
      userArgs: {},
      cacheKey: "plasmic.$.srE47GKZF.$.",
      invalidatedKeys: null,
      roleId: null
    }),
    $queries,
    setDollarQueries
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnl9I0Oib3VOwY()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicMyaccount.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMyaccount.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMyaccount.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__fxLf)}>
              <NavMenu
                data-plasmic-name={"navMenu"}
                data-plasmic-override={overrides.navMenu}
                className={classNames("__wab_instance", sty.navMenu)}
                menu2={false}
                menu3={true}
              />
            </div>
          ) : null}
          <section
            data-plasmic-name={"bkgd"}
            data-plasmic-override={overrides.bkgd}
            className={classNames(projectcss.all, sty.bkgd)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vypQs)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3M39U)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5A6Z2
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___9MlSg
                            )}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button___24Viw
                              )}
                              color={"softGreen"}
                              shape={"rounded"}
                              size={"minimal"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__aiy2V
                                )}
                              >
                                {"免费用户"}
                              </div>
                            </Button>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__c3LBd
                              )}
                            >
                              {"剩余额度   37000字"}
                            </div>
                          </div>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pfzn1
                            )}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__kWogr
                              )}
                              color={"green"}
                              shape={"rounded"}
                              size={"minimal"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___6BHuf
                                )}
                              >
                                {"充值"}
                              </div>
                            </Button>
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__wR8Ln
                              )}
                              color={"sand"}
                              onClick={async event => {
                                const $steps = {};
                                $steps["updateModalOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "Dn2GRyybX",
                                            componentUuid: "Y7xcku1e2QoFP",
                                            argName: "variable"
                                          },
                                          () => ({
                                            objRoot: $state,
                                            variablePath: ["modal", "open"]
                                          })
                                        ),
                                        operation: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "Dn2GRyybX",
                                            componentUuid: "Y7xcku1e2QoFP",
                                            argName: "operation"
                                          },
                                          () => 4
                                        )
                                      };
                                      return __wrapUserFunction(
                                        {
                                          type: "InteractionLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "Dn2GRyybX",
                                          componentUuid: "Y7xcku1e2QoFP"
                                        },
                                        () =>
                                          (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            const { objRoot, variablePath } =
                                              variable;
                                            const oldValue = p.get(
                                              objRoot,
                                              variablePath
                                            );
                                            p.set(
                                              objRoot,
                                              variablePath,
                                              !oldValue
                                            );
                                            return !oldValue;
                                          })?.apply(null, [actionArgs]),
                                        actionArgs
                                      );
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["updateModalOpen"] ===
                                    "object" &&
                                  typeof $steps["updateModalOpen"].then ===
                                    "function"
                                ) {
                                  $steps["updateModalOpen"] =
                                    await __wrapUserPromise(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "Dn2GRyybX",
                                        componentUuid: "Y7xcku1e2QoFP"
                                      },
                                      $steps["updateModalOpen"]
                                    );
                                }
                              }}
                              shape={"rounded"}
                              size={"minimal"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wih2V
                                )}
                              >
                                {"订单记录"}
                              </div>
                            </Button>
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    ) : null}
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      className={classNames("__wab_instance", sty.form)}
                      extendedOnValuesChange={p.generateStateOnChangeProp(
                        $state,
                        ["form", "value"]
                      )}
                      labelCol={{ span: 8, horizontalOnly: true }}
                      layout={"vertical"}
                      requiredMark={false}
                      wrapperCol={{ span: 16, horizontalOnly: true }}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__piGff
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tyLzK
                              )}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formItem__l5U
                                )}
                                initialValue={"小黄帽"}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__x7WF
                                    )}
                                  >
                                    {"用户名"}
                                  </div>
                                }
                                name={"username"}
                                rules={[]}
                                validateTrigger={["onSubmit"]}
                                valuePropName={"username"}
                              >
                                {(() => {
                                  const child$Props = {
                                    allowClear: false,
                                    bordered: true,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.inputNickanme
                                    ),
                                    disabled: false,
                                    maxLength: 20,
                                    onChange:
                                      p.generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["inputNickanme", "value"],
                                        AntdInput_Helpers
                                      ),
                                    placholder: "填写昵称",
                                    readOnly: false,
                                    size: "middle",
                                    type: "text",
                                    value: p.generateStateValueProp($state, [
                                      "inputNickanme",
                                      "value"
                                    ])
                                  };
                                  p.initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "inputNickanme.value"
                                      }
                                    ],

                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );
                                  return (
                                    <AntdInput
                                      data-plasmic-name={"inputNickanme"}
                                      data-plasmic-override={
                                        overrides.inputNickanme
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__y2Lrs
                                )}
                                color={"softGreen"}
                                onClick={async event => {
                                  const $steps = {};
                                }}
                                size={"compact"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__s9Fw3
                                  )}
                                >
                                  {"保存修改"}
                                </div>
                              </Button>
                            </p.Stack>
                          ) : null}
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formItem__ceD7D
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fQa1X
                                )}
                              >
                                {"账号状态"}
                              </div>
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jMgHl
                              )}
                            >
                              {"免费版（正常）"}
                            </div>
                          </FormItemWrapper>
                        </p.Stack>
                      ) : null}
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0A2A
                          )}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formItem__vptI5
                            )}
                            initialValue={"无"}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__x9E15
                                )}
                              >
                                {"邮箱"}
                              </div>
                            }
                            name={"email"}
                            valuePropName={"email"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.inputEmail
                                ),
                                onChange:
                                  p.generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["inputEmail", "value"],
                                    AntdInput_Helpers
                                  ),
                                placholder: "绑定邮箱",
                                type: "email",
                                value: p.generateStateValueProp($state, [
                                  "inputEmail",
                                  "value"
                                ])
                              };
                              p.initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "inputEmail.value"
                                  }
                                ],

                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"inputEmail"}
                                  data-plasmic-override={overrides.inputEmail}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__x7Q8O
                            )}
                            color={"softGreen"}
                            size={"compact"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xShwH
                              )}
                            >
                              {"绑定邮箱"}
                            </div>
                          </Button>
                        </p.Stack>
                      ) : null}
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yzy7M
                          )}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formItem___6SkUa
                            )}
                            initialValue={"122673627872"}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oEzuk
                                )}
                              >
                                {"手机"}
                              </div>
                            }
                            name={"mobile"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.inputMob
                                ),
                                disabled: true,
                                onChange:
                                  p.generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["inputMob", "value"],
                                    AntdInput_Helpers
                                  ),
                                placholder: ``,
                                value: p.generateStateValueProp($state, [
                                  "inputMob",
                                  "value"
                                ])
                              };
                              p.initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "inputMob.value"
                                  }
                                ],

                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"inputMob"}
                                  data-plasmic-override={overrides.inputMob}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__xtKeq
                            )}
                            color={"softGreen"}
                            size={"compact"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tGWcF
                              )}
                            >
                              {"手机换绑"}
                            </div>
                          </Button>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__yGtHx
                            )}
                            color={"softGreen"}
                            size={"compact"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nXnqj
                              )}
                            >
                              {"修改密码"}
                            </div>
                          </Button>
                        </p.Stack>
                      ) : null}
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7D2Cq
                          )}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formItem__cbFn6
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fDkIh
                                )}
                              >
                                {"礼品码"}
                              </div>
                            }
                            name={"name"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.presentCode
                                ),
                                onChange:
                                  p.generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["presentCode", "value"],
                                    AntdInput_Helpers
                                  ),
                                placholder: "礼品码",
                                size: "middle",
                                value: p.generateStateValueProp($state, [
                                  "presentCode",
                                  "value"
                                ])
                              };
                              p.initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "presentCode.value"
                                  }
                                ],

                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"presentCode"}
                                  data-plasmic-override={overrides.presentCode}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__qvCyv
                            )}
                            color={"softGreen"}
                            size={"compact"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fQxtj
                              )}
                            >
                              {"使用"}
                            </div>
                          </Button>
                        </p.Stack>
                      ) : null}
                    </FormWrapper>
                  </div>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__xhRnq)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5ZWsN
                    )}
                  >
                    {"进群就送3000额度"}
                  </div>
                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/chats_client/images/image2.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
              </p.Stack>
            ) : null}
          </section>
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            cancelText={"返回"}
            className={classNames("__wab_instance", sty.modal)}
            closeButtonClassName={classNames({ [sty["pcls_3zA669NES"]]: true })}
            closeIcon={
              <Icon11Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            modalClassName={classNames({ [sty["pcls_vCH3UpV_-"]]: true })}
            modalScopeClassName={sty["modal__modal"]}
            okText={"确认"}
            onOpenChange={p.generateStateOnChangeProp($state, [
              "modal",
              "open"
            ])}
            open={p.generateStateValueProp($state, ["modal", "open"])}
            title={"订单记录"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__nZ5Pq)}>
              {(() => {
                const child$Props = {
                  canSelectRows: "none",
                  className: classNames("__wab_instance", sty.table),
                  data: (() => {
                    try {
                      return $queries.orders;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  defaultSize: "small",
                  fields: [
                    {
                      key: "__airtable_id",
                      fieldId: "__airtable_id",
                      isHidden: true
                    },
                    {
                      key: "order_id",
                      fieldId: "order_id",
                      title: "订单编号",
                      dataType: "number"
                    },
                    {
                      key: "order_status",
                      fieldId: "order_status",
                      title: "状态",
                      isHidden: true
                    },
                    { key: "user_id", fieldId: "user_id", isHidden: true },
                    { key: "amount", fieldId: "amount", title: "金额" },
                    { key: "product", fieldId: "product", title: "产品" },
                    { key: "pay_info", fieldId: "pay_info", title: "支付方式" },
                    {
                      key: "order_time",
                      fieldId: "order_time",
                      title: "支付时间"
                    },
                    {
                      key: "order_update",
                      fieldId: "order_update",
                      isHidden: true
                    },
                    {
                      key: "validity_start",
                      fieldId: "validity_start",
                      isHidden: true
                    },
                    {
                      key: "validity_end",
                      fieldId: "validity_end",
                      isHidden: true
                    }
                  ],

                  hideColumnPicker: true,
                  hideDensity: true,
                  hideExports: true,
                  hideSearch: true,
                  onRowSelectionChanged: async (...eventArgs) => {
                    p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRowKey",
                      ["table", "selectedRowKey"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                    p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRow",
                      ["table", "selectedRow"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                    p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRows",
                      ["table", "selectedRows"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                  },
                  selectedRowKey: p.generateStateValueProp($state, [
                    "table",
                    "selectedRowKey"
                  ])
                };
                p.initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "selectedRowKey",
                      plasmicStateName: "table.selectedRowKey"
                    },
                    {
                      name: "selectedRow",
                      plasmicStateName: "table.selectedRow"
                    },
                    {
                      name: "selectedRows",
                      plasmicStateName: "table.selectedRows"
                    }
                  ],

                  [],
                  RichTable_Helpers ?? {},
                  child$Props
                );
                return (
                  <RichTable
                    data-plasmic-name={"table"}
                    data-plasmic-override={overrides.table}
                    {...child$Props}
                  />
                );
              })()}
            </div>
          </AntdModal>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <Toolbar
              data-plasmic-name={"toolbar"}
              data-plasmic-override={overrides.toolbar}
              className={classNames("__wab_instance", sty.toolbar)}
              tab3={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navMenu",
    "bkgd",
    "form",
    "inputNickanme",
    "inputEmail",
    "inputMob",
    "presentCode",
    "img",
    "modal",
    "table",
    "svg",
    "toolbar"
  ],

  navMenu: ["navMenu"],
  bkgd: [
    "bkgd",
    "form",
    "inputNickanme",
    "inputEmail",
    "inputMob",
    "presentCode",
    "img"
  ],

  form: ["form", "inputNickanme", "inputEmail", "inputMob", "presentCode"],
  inputNickanme: ["inputNickanme"],
  inputEmail: ["inputEmail"],
  inputMob: ["inputMob"],
  presentCode: ["presentCode"],
  img: ["img"],
  modal: ["modal", "table", "svg"],
  table: ["table"],
  svg: ["svg"],
  toolbar: ["toolbar"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMyaccount__ArgProps,
          internalVariantPropNames: PlasmicMyaccount__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMyaccount__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMyaccount";
  } else {
    func.displayName = `PlasmicMyaccount.${nodeName}`;
  }
  return func;
}

export const PlasmicMyaccount = Object.assign(
  // Top-level PlasmicMyaccount renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navMenu: makeNodeComponent("navMenu"),
    bkgd: makeNodeComponent("bkgd"),
    form: makeNodeComponent("form"),
    inputNickanme: makeNodeComponent("inputNickanme"),
    inputEmail: makeNodeComponent("inputEmail"),
    inputMob: makeNodeComponent("inputMob"),
    presentCode: makeNodeComponent("presentCode"),
    img: makeNodeComponent("img"),
    modal: makeNodeComponent("modal"),
    table: makeNodeComponent("table"),
    svg: makeNodeComponent("svg"),
    toolbar: makeNodeComponent("toolbar"),
    // Metadata about props expected for PlasmicMyaccount
    internalVariantProps: PlasmicMyaccount__VariantProps,
    internalArgProps: PlasmicMyaccount__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "我的账户",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMyaccount;
/* prettier-ignore-end */
