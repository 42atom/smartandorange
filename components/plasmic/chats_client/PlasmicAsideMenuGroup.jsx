// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: uLABqFF5hL
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import AsideMenuItem from "../../AsideMenuItem"; // plasmic-import: M4gUwXUTik/component
import { useScreenVariants as useScreenVariantsnl9I0Oib3VOwY } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nl9_I0oib3VOwY/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicAsideMenuGroup.module.css"; // plasmic-import: uLABqFF5hL/css
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: 6_oKYAuIan/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: Qv4aqJsvqQ/icon

export const PlasmicAsideMenuGroup__VariantProps = new Array();

export const PlasmicAsideMenuGroup__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAsideMenuGroup__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "asideMenuItem.isCurrent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "asideMenuItem2.isCurrent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "asideMenuItem3.isCurrent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => "isCurrent"
      },
      {
        path: "asideMenuItem4.isCurrent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnl9I0Oib3VOwY()
  });
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <AsideMenuItem
        data-plasmic-name={"asideMenuItem2"}
        data-plasmic-override={overrides.asideMenuItem2}
        className={classNames("__wab_instance", sty.asideMenuItem2)}
        icon={
          <Icon20Icon
            className={classNames(projectcss.all, sty.svg___0Ynep)}
            role={"img"}
          />
        }
        isCurrent={p.generateStateValueProp($state, [
          "asideMenuItem2",
          "isCurrent"
        ])}
        label={"我的收藏"}
        onIsCurrentChange={p.generateStateOnChangeProp($state, [
          "asideMenuItem2",
          "isCurrent"
        ])}
      />

      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <AsideMenuItem
          data-plasmic-name={"asideMenuItem"}
          data-plasmic-override={overrides.asideMenuItem}
          className={classNames("__wab_instance", sty.asideMenuItem)}
          icon={
            <Icon19Icon
              className={classNames(projectcss.all, sty.svg___0Vnsy)}
              role={"img"}
            />
          }
          isCurrent={p.generateStateValueProp($state, [
            "asideMenuItem",
            "isCurrent"
          ])}
          onIsCurrentChange={async (...eventArgs) => {
            p.generateStateOnChangeProp($state, [
              "asideMenuItem",
              "isCurrent"
            ]).apply(null, eventArgs);
            (async val => {
              const $steps = {};
            }).apply(null, eventArgs);
          }}
        />
      ) : null}
      <AsideMenuItem
        data-plasmic-name={"asideMenuItem3"}
        data-plasmic-override={overrides.asideMenuItem3}
        className={classNames("__wab_instance", sty.asideMenuItem3)}
        icon={
          <Icon19Icon
            className={classNames(projectcss.all, sty.svg__hyyDm)}
            role={"img"}
          />
        }
        isCurrent={p.generateStateValueProp($state, [
          "asideMenuItem3",
          "isCurrent"
        ])}
        onIsCurrentChange={async (...eventArgs) => {
          p.generateStateOnChangeProp($state, [
            "asideMenuItem3",
            "isCurrent"
          ]).apply(null, eventArgs);
          (async val => {
            const $steps = {};
          }).apply(null, eventArgs);
        }}
      />

      <AsideMenuItem
        data-plasmic-name={"asideMenuItem4"}
        data-plasmic-override={overrides.asideMenuItem4}
        className={classNames("__wab_instance", sty.asideMenuItem4)}
        icon={
          <Icon19Icon
            className={classNames(projectcss.all, sty.svg__mkyN)}
            role={"img"}
          />
        }
        isCurrent={p.generateStateValueProp($state, [
          "asideMenuItem4",
          "isCurrent"
        ])}
        onIsCurrentChange={async (...eventArgs) => {
          p.generateStateOnChangeProp($state, [
            "asideMenuItem4",
            "isCurrent"
          ]).apply(null, eventArgs);
          (async val => {
            const $steps = {};
          }).apply(null, eventArgs);
        }}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "asideMenuItem2",
    "asideMenuItem",
    "asideMenuItem3",
    "asideMenuItem4"
  ],

  asideMenuItem2: ["asideMenuItem2"],
  asideMenuItem: ["asideMenuItem"],
  asideMenuItem3: ["asideMenuItem3"],
  asideMenuItem4: ["asideMenuItem4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAsideMenuGroup__ArgProps,
          internalVariantPropNames: PlasmicAsideMenuGroup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAsideMenuGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAsideMenuGroup";
  } else {
    func.displayName = `PlasmicAsideMenuGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicAsideMenuGroup = Object.assign(
  // Top-level PlasmicAsideMenuGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    asideMenuItem2: makeNodeComponent("asideMenuItem2"),
    asideMenuItem: makeNodeComponent("asideMenuItem"),
    asideMenuItem3: makeNodeComponent("asideMenuItem3"),
    asideMenuItem4: makeNodeComponent("asideMenuItem4"),
    // Metadata about props expected for PlasmicAsideMenuGroup
    internalVariantProps: PlasmicAsideMenuGroup__VariantProps,
    internalArgProps: PlasmicAsideMenuGroup__ArgProps
  }
);

export default PlasmicAsideMenuGroup;
/* prettier-ignore-end */
