// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: uLABqFF5hL
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import AsideMenuItem from "../../AsideMenuItem"; // plasmic-import: M4gUwXUTik/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicAsideMenuGroup.module.css"; // plasmic-import: uLABqFF5hL/css
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: 6_oKYAuIan/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: Qv4aqJsvqQ/icon

export const PlasmicAsideMenuGroup__VariantProps = new Array();

export const PlasmicAsideMenuGroup__ArgProps = new Array(
  "itemsMenu",
  "onItemsMenuChange",
  "valueId",
  "onValueIdChange"
);

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAsideMenuGroup__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "itemsMenu",
        type: "writable",
        variableType: "array",
        valueProp: "itemsMenu",
        onChangeProp: "onItemsMenuChange"
      },
      {
        path: "valueId",
        type: "writable",
        variableType: "number",
        valueProp: "valueId",
        onChangeProp: "onValueIdChange"
      },
      {
        path: "asideMenuItem[].isCurrent",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "asideMenuItem2.isCurrent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {(() => {
          try {
            return "当前选择 " + $state.valueId;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}
      </div>
      <AsideMenuItem
        data-plasmic-name={"asideMenuItem2"}
        data-plasmic-override={overrides.asideMenuItem2}
        className={classNames("__wab_instance", sty.asideMenuItem2)}
        icon={
          <Icon20Icon
            className={classNames(projectcss.all, sty.svg___0Ynep)}
            role={"img"}
          />
        }
        isCurrent={p.generateStateValueProp($state, [
          "asideMenuItem2",
          "isCurrent"
        ])}
        label={"我的收藏"}
        onIsCurrentChange={async (...eventArgs) => {
          p.generateStateOnChangeProp($state, [
            "asideMenuItem2",
            "isCurrent"
          ]).apply(null, eventArgs);
          (async val => {
            const $steps = {};
            $steps["updateValueId2"] = true
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "V8PBhad2U",
                        componentUuid: "uLABqFF5hL",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["valueId"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "V8PBhad2U",
                        componentUuid: "uLABqFF5hL",
                        argName: "operation"
                      },
                      () => 0
                    ),
                    value: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "V8PBhad2U",
                        componentUuid: "uLABqFF5hL",
                        argName: "value"
                      },
                      () => ($state.valueId = 9)
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "V8PBhad2U",
                      componentUuid: "uLABqFF5hL"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateValueId2"] === "object" &&
              typeof $steps["updateValueId2"].then === "function"
            ) {
              $steps["updateValueId2"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "V8PBhad2U",
                  componentUuid: "uLABqFF5hL"
                },
                $steps["updateValueId2"]
              );
            }
          }).apply(null, eventArgs);
        }}
      />

      <div
        data-plasmic-name={"line"}
        data-plasmic-override={overrides.line}
        className={classNames(projectcss.all, sty.line)}
      />

      {(
        (() => {
          try {
            return $state.itemsMenu;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })() ?? []
      ).map((currentItem, currentIndex) =>
        (() => {
          const child$Props = {
            className: classNames("__wab_instance", sty.asideMenuItem),
            icon: (
              <Icon19Icon
                className={classNames(projectcss.all, sty.svg___0Vnsy)}
                role={"img"}
              />
            ),

            isCurrent: p.generateStateValueProp($state, [
              "asideMenuItem",
              currentIndex,
              "isCurrent"
            ]),
            key: currentIndex,
            label: (() => {
              try {
                return currentItem.label;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })(),
            onIsCurrentChange: async (...eventArgs) => {
              p.generateStateOnChangeProp($state, [
                "asideMenuItem",
                currentIndex,
                "isCurrent"
              ]).apply(null, eventArgs);
              (async val => {
                const $steps = {};
                $steps["updateValueId"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "OPlxXYsB0",
                            componentUuid: "uLABqFF5hL",
                            argName: "variable"
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ["valueId"]
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "OPlxXYsB0",
                            componentUuid: "uLABqFF5hL",
                            argName: "operation"
                          },
                          () => 0
                        ),
                        value: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "OPlxXYsB0",
                            componentUuid: "uLABqFF5hL",
                            argName: "value"
                          },
                          () => ($state.valueId = currentItem.id)
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "OPlxXYsB0",
                          componentUuid: "uLABqFF5hL"
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateValueId"] === "object" &&
                  typeof $steps["updateValueId"].then === "function"
                ) {
                  $steps["updateValueId"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "OPlxXYsB0",
                      componentUuid: "uLABqFF5hL"
                    },
                    $steps["updateValueId"]
                  );
                }
              }).apply(null, eventArgs);
            }
          };
          p.initializePlasmicStates(
            $state,
            [
              {
                name: "asideMenuItem[].isCurrent",
                initFunc: ({ $props, $state, $queries }) =>
                  (() => {
                    try {
                      return $state.valueId === currentItem.id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
              }
            ],

            [currentIndex]
          );
          return (
            <AsideMenuItem
              data-plasmic-name={"asideMenuItem"}
              data-plasmic-override={overrides.asideMenuItem}
              {...child$Props}
            />
          );
        })()
      )}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "asideMenuItem2", "line", "asideMenuItem"],
  text: ["text"],
  asideMenuItem2: ["asideMenuItem2"],
  line: ["line"],
  asideMenuItem: ["asideMenuItem"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAsideMenuGroup__ArgProps,
          internalVariantPropNames: PlasmicAsideMenuGroup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAsideMenuGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAsideMenuGroup";
  } else {
    func.displayName = `PlasmicAsideMenuGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicAsideMenuGroup = Object.assign(
  // Top-level PlasmicAsideMenuGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    asideMenuItem2: makeNodeComponent("asideMenuItem2"),
    line: makeNodeComponent("line"),
    asideMenuItem: makeNodeComponent("asideMenuItem"),
    // Metadata about props expected for PlasmicAsideMenuGroup
    internalVariantProps: PlasmicAsideMenuGroup__VariantProps,
    internalArgProps: PlasmicAsideMenuGroup__ArgProps
  }
);

export default PlasmicAsideMenuGroup;
/* prettier-ignore-end */
