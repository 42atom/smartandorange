// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: PlpIcihQhaX91
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { useDependencyAwareQuery } from "@plasmicapp/react-web/lib/data-sources";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import MenuNav from "../../MenuNav"; // plasmic-import: 9cR2sxpykRjad/component
import { Tabs } from "@plasmicpkgs/antd/skinny/registerTabs"; // plasmic-import: Hb-DVgvuk3/codeComponent
import { TabPane } from "@plasmicpkgs/antd/skinny/registerTabs"; // plasmic-import: p3HNI5RglT/codeComponent
import SceneInfo from "../../SceneInfo"; // plasmic-import: Zf1zYQ7YK23by/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicWorkspaces.module.css"; // plasmic-import: PlpIcihQhaX91/css

export const PlasmicWorkspaces__VariantProps = new Array();

export const PlasmicWorkspaces__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWorkspaces__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  useDependencyAwareQuery({
    name: "scenes",
    getDataOp: () => ({
      sourceId: "9m6seF9rffTwqmNeTPj4dy",
      opId: "0fcbb781-dca9-42b0-bffb-923550b1d4c5",
      userArgs: {},
      cacheKey: "plasmic.$.rINfrMoPavP8l.$.",
      invalidatedKeys: null,
      roleId: null
    }),
    $queries,
    setDollarQueries
  });
  useDependencyAwareQuery({
    name: "catalogs",
    getDataOp: () => ({
      sourceId: "9m6seF9rffTwqmNeTPj4dy",
      opId: "4e42ebdf-8e99-4ba7-8b79-48a8b655a36b",
      userArgs: {},
      cacheKey: "plasmic.$.8DStGR5tk.$.",
      invalidatedKeys: ["plasmic_refresh_all"],
      roleId: null
    }),
    $queries,
    setDollarQueries
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicWorkspaces.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicWorkspaces.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicWorkspaces.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__g6Bq0)}>
              <MenuNav
                data-plasmic-name={"menuNav"}
                data-plasmic-override={overrides.menuNav}
                className={classNames("__wab_instance", sty.menuNav)}
                selected={["menuItemKey1"]}
              />

              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2Fy1N)}
                  >
                    <Tabs
                      data-plasmic-name={"antdTabs"}
                      data-plasmic-override={overrides.antdTabs}
                      addIcon={null}
                      centered={false}
                      className={classNames("__wab_instance", sty.antdTabs)}
                      defaultActiveKey={"0"}
                      leftTabBarExtraContent={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mpbac
                          )}
                        >
                          {"场景分类"}
                        </div>
                      }
                      moreIcon={null}
                      rightTabBarExtraContent={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__i4YcG
                            )}
                          >
                            {"剩余字数 30000"}
                          </div>
                          <div
                            data-plasmic-name={"用户名"}
                            data-plasmic-override={overrides.用户名}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.用户名
                            )}
                          >
                            {"用户名"}
                          </div>
                          <div
                            data-plasmic-name={"vip"}
                            data-plasmic-override={overrides.vip}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.vip
                            )}
                          >
                            {"免费版"}
                          </div>
                        </React.Fragment>
                      }
                      size={"default"}
                      tabBarGutter={4}
                      tabPosition={"left"}
                      type={"card"}
                    >
                      <TabPane
                        className={classNames(
                          "__wab_instance",
                          sty.antdTabPane__tQvxZ
                        )}
                        closeIcon={null}
                        key={"0"}
                        tab={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lXcuc
                            )}
                          >
                            {"热门"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u0GZf
                          )}
                        >
                          {"请选择样板"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xdhlF
                          )}
                        >
                          {(
                            (() => {
                              try {
                                return $queries.scenes.data;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return [];
                                }
                                throw e;
                              }
                            })() ?? []
                          ).map((currentItem, currentIndex) => (
                            <SceneInfo
                              data-plasmic-name={"sceneInfo"}
                              data-plasmic-override={overrides.sceneInfo}
                              className={classNames(
                                "__wab_instance",
                                sty.sceneInfo
                              )}
                              desc={(() => {
                                try {
                                  return currentItem.description;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "desc";
                                  }
                                  throw e;
                                }
                              })()}
                              input={
                                <div
                                  data-plasmic-name={"input"}
                                  data-plasmic-override={overrides.input}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.input
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (
                                        "输入： " + currentItem.modal_input
                                      );
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Modal content";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </div>
                              }
                              key={currentIndex}
                              output={(() => {
                                try {
                                  return "输出：" + currentItem.modal_content;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "Modal content";
                                  }
                                  throw e;
                                }
                              })()}
                              slot={(() => {
                                try {
                                  return currentItem.scenes_name;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "Modal title";
                                  }
                                  throw e;
                                }
                              })()}
                              title={(() => {
                                try {
                                  return currentItem.scenes_name;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "场景标题";
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <p.PlasmicImg
                                data-plasmic-name={"img"}
                                data-plasmic-override={overrides.img}
                                alt={""}
                                className={classNames(sty.img)}
                                displayHeight={"24px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"24px"}
                                loading={"lazy"}
                                src={(() => {
                                  try {
                                    return currentItem.scene_icon;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "https://www.svgrepo.com/show/474676/germs.svg";
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </SceneInfo>
                          ))}
                        </div>
                      </TabPane>
                      <TabPane
                        className={classNames(
                          "__wab_instance",
                          sty.antdTabPane___9MKf
                        )}
                        closeIcon={null}
                        key={"1"}
                        tab={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sppt
                            )}
                          >
                            {"小红书营销类"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jbJ65
                          )}
                        >
                          {"Tab Content"}
                        </div>
                      </TabPane>
                      <TabPane
                        className={classNames(
                          "__wab_instance",
                          sty.antdTabPane__bb67K
                        )}
                        closeIcon={null}
                        key={"2"}
                        tab={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8Qior
                            )}
                          >
                            {"中文社交媒体"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r27Rp
                          )}
                        >
                          {"Tab Content"}
                        </div>
                      </TabPane>
                      <TabPane
                        className={classNames(
                          "__wab_instance",
                          sty.antdTabPane__vC47F
                        )}
                        closeIcon={null}
                        key={"3"}
                        tab={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gbPm4
                            )}
                          >
                            {"英文社交媒体"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__moUgd
                          )}
                        >
                          {"Tab Content"}
                        </div>
                      </TabPane>
                      <TabPane
                        className={classNames(
                          "__wab_instance",
                          sty.antdTabPane__hcFyH
                        )}
                        closeIcon={null}
                        key={"4"}
                        tab={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lcqfK
                            )}
                          >
                            {"出题机"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5XcVw
                          )}
                        >
                          {"Tab Content"}
                        </div>
                      </TabPane>
                      <TabPane
                        className={classNames(
                          "__wab_instance",
                          sty.antdTabPane__dtDcl
                        )}
                        closeIcon={null}
                        key={"5"}
                        tab={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__d99V8
                            )}
                          >
                            {"合同助手"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vGMv
                          )}
                        >
                          {"Tab Content"}
                        </div>
                      </TabPane>
                    </Tabs>
                  </div>
                ) : null}
              </section>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "menuNav",
    "section",
    "antdTabs",
    "用户名",
    "vip",
    "sceneInfo",
    "img",
    "input"
  ],

  menuNav: ["menuNav"],
  section: [
    "section",
    "antdTabs",
    "用户名",
    "vip",
    "sceneInfo",
    "img",
    "input"
  ],

  antdTabs: ["antdTabs", "用户名", "vip", "sceneInfo", "img", "input"],
  用户名: ["用户名"],
  vip: ["vip"],
  sceneInfo: ["sceneInfo", "img", "input"],
  img: ["img"],
  input: ["input"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicWorkspaces__ArgProps,
          internalVariantPropNames: PlasmicWorkspaces__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWorkspaces__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWorkspaces";
  } else {
    func.displayName = `PlasmicWorkspaces.${nodeName}`;
  }
  return func;
}

export const PlasmicWorkspaces = Object.assign(
  // Top-level PlasmicWorkspaces renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuNav: makeNodeComponent("menuNav"),
    section: makeNodeComponent("section"),
    antdTabs: makeNodeComponent("antdTabs"),
    用户名: makeNodeComponent("用户名"),
    vip: makeNodeComponent("vip"),
    sceneInfo: makeNodeComponent("sceneInfo"),
    img: makeNodeComponent("img"),
    input: makeNodeComponent("input"),
    // Metadata about props expected for PlasmicWorkspaces
    internalVariantProps: PlasmicWorkspaces__VariantProps,
    internalArgProps: PlasmicWorkspaces__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "工作台",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicWorkspaces;
/* prettier-ignore-end */
