// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: slY9K5ec7o
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicScenesTagMenuBtn.module.css"; // plasmic-import: slY9K5ec7o/css

export const PlasmicScenesTagMenuBtn__VariantProps = new Array("isActive");

export const PlasmicScenesTagMenuBtn__ArgProps = new Array("children");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicScenesTagMenuBtn__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isActive",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isActive
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <div
      data-plasmic-name={"base"}
      data-plasmic-override={overrides.base}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.base,
        { [sty.baseisActive]: hasVariant($state, "isActive", "isActive") }
      )}
    >
      {true ? (
        <div
          data-plasmic-name={"btn"}
          data-plasmic-override={overrides.btn}
          className={classNames(projectcss.all, sty.btn, {
            [sty.btnisActive]: hasVariant($state, "isActive", "isActive")
          })}
          onClick={async event => {
            const $steps = {};
            $steps["updateIsActive"] = true
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "HVS9PYNiX",
                        componentUuid: "slY9K5ec7o",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["isActive"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "HVS9PYNiX",
                        componentUuid: "slY9K5ec7o",
                        argName: "operation"
                      },
                      () => 0
                    ),
                    value: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "HVS9PYNiX",
                        componentUuid: "slY9K5ec7o",
                        argName: "value"
                      },
                      () => true
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "HVS9PYNiX",
                      componentUuid: "slY9K5ec7o"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateIsActive"] === "object" &&
              typeof $steps["updateIsActive"].then === "function"
            ) {
              $steps["updateIsActive"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "HVS9PYNiX",
                  componentUuid: "slY9K5ec7o"
                },
                $steps["updateIsActive"]
              );
            }
          }}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxisActive]: hasVariant($state, "isActive", "isActive")
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "收藏",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenisActive]: hasVariant(
                  $state,
                  "isActive",
                  "isActive"
                )
              })
            })}
          </div>
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  base: ["base", "btn", "freeBox"],
  btn: ["btn", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicScenesTagMenuBtn__ArgProps,
          internalVariantPropNames: PlasmicScenesTagMenuBtn__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicScenesTagMenuBtn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "base") {
    func.displayName = "PlasmicScenesTagMenuBtn";
  } else {
    func.displayName = `PlasmicScenesTagMenuBtn.${nodeName}`;
  }
  return func;
}

export const PlasmicScenesTagMenuBtn = Object.assign(
  // Top-level PlasmicScenesTagMenuBtn renders the root element
  makeNodeComponent("base"),
  {
    // Helper components rendering sub-elements
    btn: makeNodeComponent("btn"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicScenesTagMenuBtn
    internalVariantProps: PlasmicScenesTagMenuBtn__VariantProps,
    internalArgProps: PlasmicScenesTagMenuBtn__ArgProps
  }
);

export default PlasmicScenesTagMenuBtn;
/* prettier-ignore-end */
