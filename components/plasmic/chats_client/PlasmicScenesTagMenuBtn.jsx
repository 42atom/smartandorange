// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: slY9K5ec7o
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicScenesTagMenuBtn.module.css"; // plasmic-import: slY9K5ec7o/css
import Icon36Icon from "./icons/PlasmicIcon__Icon36"; // plasmic-import: YzVIckEt_5/icon

export const PlasmicScenesTagMenuBtn__VariantProps = new Array("isActive");

export const PlasmicScenesTagMenuBtn__ArgProps = new Array("icon2", "children");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicScenesTagMenuBtn__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isActive",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isActive
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <div
      data-plasmic-name={"base"}
      data-plasmic-override={overrides.base}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.base,
        { [sty.baseisActive]: hasVariant($state, "isActive", "isActive") }
      )}
    >
      <label
        data-plasmic-name={"label"}
        data-plasmic-override={overrides.label}
        className={classNames(projectcss.all, sty.label)}
      >
        <div
          data-plasmic-name={"icon2"}
          data-plasmic-override={overrides.icon2}
          className={classNames(projectcss.all, sty.icon2)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Icon36Icon
                className={classNames(projectcss.all, sty.svg__ok1Hx)}
                role={"img"}
              />
            ),

            value: args.icon2
          })}
        </div>
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(projectcss.all, sty.text)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "收藏",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
      </label>
    </div>
  );
}

const PlasmicDescendants = {
  base: ["base", "label", "icon2", "text"],
  label: ["label", "icon2", "text"],
  icon2: ["icon2"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicScenesTagMenuBtn__ArgProps,
          internalVariantPropNames: PlasmicScenesTagMenuBtn__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicScenesTagMenuBtn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "base") {
    func.displayName = "PlasmicScenesTagMenuBtn";
  } else {
    func.displayName = `PlasmicScenesTagMenuBtn.${nodeName}`;
  }
  return func;
}

export const PlasmicScenesTagMenuBtn = Object.assign(
  // Top-level PlasmicScenesTagMenuBtn renders the root element
  makeNodeComponent("base"),
  {
    // Helper components rendering sub-elements
    label: makeNodeComponent("label"),
    icon2: makeNodeComponent("icon2"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicScenesTagMenuBtn
    internalVariantProps: PlasmicScenesTagMenuBtn__VariantProps,
    internalArgProps: PlasmicScenesTagMenuBtn__ArgProps
  }
);

export default PlasmicScenesTagMenuBtn;
/* prettier-ignore-end */
