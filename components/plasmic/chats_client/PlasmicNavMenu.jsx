// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: 9cR2sxpykRjad
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavMenuItem from "../../NavMenuItem"; // plasmic-import: Vp9kLSLaI-/component
import { useScreenVariants as useScreenVariantsnl9I0Oib3VOwY } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nl9_I0oib3VOwY/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicNavMenu.module.css"; // plasmic-import: 9cR2sxpykRjad/css

export const PlasmicNavMenu__VariantProps = new Array();

export const PlasmicNavMenu__ArgProps = new Array(
  "menu1",
  "menu2",
  "menu3",
  "menu4"
);

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavMenu__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          menu1: false,
          menu2: false,
          menu3: false,
          menu4: false
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnl9I0Oib3VOwY()
  });
  return true ? (
    <div
      data-plasmic-name={"topNav"}
      data-plasmic-override={overrides.topNav}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.topNav
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__t2X4N)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            hasGap={true}
            className={classNames(projectcss.all, sty.header)}
            onClick={async event => {
              const $steps = {};
              $steps["goToHomepage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "navigation",
                          interactionUuid: "c3G1bE_FZ",
                          componentUuid: "9cR2sxpykRjad",
                          argName: "destination"
                        },
                        () => `/`
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "navigation",
                        interactionUuid: "c3G1bE_FZ",
                        componentUuid: "9cR2sxpykRjad"
                      },
                      () =>
                        (({ destination }) => {
                          __nextRouter?.push(destination);
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "navigation",
                    interactionUuid: "c3G1bE_FZ",
                    componentUuid: "9cR2sxpykRjad"
                  },
                  $steps["goToHomepage"]
                );
              }
            }}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"26px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/chats_client/images/logoOnlypng2.png",
                fullWidth: 76,
                fullHeight: 80,
                aspectRatio: undefined
              }}
            />

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gg86G)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ic8OF
                  )}
                >
                  {"机智桔子"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pXwwu
                  )}
                >
                  {"Beta版"}
                </div>
              </p.Stack>
            ) : null}
          </p.Stack>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div className={classNames(projectcss.all, sty.freeBox__uWzy1)}>
          <NavMenuItem
            className={classNames("__wab_instance", sty.navMenuItem__j5ED0)}
            selectedItem={$props.menu1}
            selectedState={args.menu1}
            url={"/workspaces"}
          />

          <NavMenuItem
            className={classNames("__wab_instance", sty.navMenuItem__tZjvr)}
            label={"我的文档"}
            selectedItem={$props.menu2}
            selectedState={args.menu1}
            url={"/mydocuments"}
          />

          <NavMenuItem
            className={classNames("__wab_instance", sty.navMenuItem__ld6Dy)}
            label={"我的账户"}
            selectedItem={$props.menu3}
            selectedState={args.menu1}
            url={"/myaccount"}
          />

          <NavMenuItem
            className={classNames("__wab_instance", sty.navMenuItem___5Dc5E)}
            label={"系统商店"}
            selectedItem={$props.menu4}
            selectedState={args.menu1}
            url={"/shop"}
          />
        </div>
      ) : null}
    </div>
  ) : null;
}

const PlasmicDescendants = {
  topNav: ["topNav", "header", "img"],
  header: ["header", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavMenu__ArgProps,
          internalVariantPropNames: PlasmicNavMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "topNav") {
    func.displayName = "PlasmicNavMenu";
  } else {
    func.displayName = `PlasmicNavMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicNavMenu = Object.assign(
  // Top-level PlasmicNavMenu renders the root element
  makeNodeComponent("topNav"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicNavMenu
    internalVariantProps: PlasmicNavMenu__VariantProps,
    internalArgProps: PlasmicNavMenu__ArgProps
  }
);

export default PlasmicNavMenu;
/* prettier-ignore-end */
