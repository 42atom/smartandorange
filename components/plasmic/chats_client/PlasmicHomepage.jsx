// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: AAi9AuCCbMra
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: YO5Bwb9purCqu/component
import Price from "../../Price"; // plasmic-import: A7lxlJD3kKn/component
import { useScreenVariants as useScreenVariantsnl9I0Oib3VOwY } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nl9_I0oib3VOwY/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: AAi9AuCCbMra/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: AO1hQKEExk65Hm/icon
import Icon33Icon from "./icons/PlasmicIcon__Icon33"; // plasmic-import: XIRWRAcqHX/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: WYrTsWzQKYW/icon
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: ZbMsAnw-ze/icon
import Icon35Icon from "./icons/PlasmicIcon__Icon35"; // plasmic-import: 3YzAnJHjoB/icon
import Icon36Icon from "./icons/PlasmicIcon__Icon36"; // plasmic-import: YzVIckEt_5/icon
import Icon37Icon from "./icons/PlasmicIcon__Icon37"; // plasmic-import: eqEVTrEBm2/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: s30yngpZn5/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnl9I0Oib3VOwY()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />

        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />

        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />

        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__vTrh4)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qnDkJ)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__u2Shq)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___6Olc6)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "128px"
                      : "200px"
                  }
                  src={{
                    src: "/plasmic/chats_client/images/logofull2Xpng.png",
                    fullWidth: 346,
                    fullHeight: 96,
                    aspectRatio: undefined
                  }}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sXpnp)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__edLoX
                      )}
                      color={"clear"}
                      endIcon={
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__l4HSf)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToDescValue"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "navigation",
                                    interactionUuid: "uPeGkQxTT",
                                    componentUuid: "AAi9AuCCbMra",
                                    argName: "destination"
                                  },
                                  () => "/#desc-value"
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "uPeGkQxTT",
                                  componentUuid: "AAi9AuCCbMra"
                                },
                                () =>
                                  (({ destination }) => {
                                    __nextRouter?.push(destination);
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["goToDescValue"] === "object" &&
                          typeof $steps["goToDescValue"].then === "function"
                        ) {
                          $steps["goToDescValue"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "uPeGkQxTT",
                              componentUuid: "AAi9AuCCbMra"
                            },
                            $steps["goToDescValue"]
                          );
                        }
                      }}
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yGBgA
                        )}
                      >
                        {"使用说明"}
                      </div>
                    </Button>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__lwQFu
                      )}
                      color={"clear"}
                      endIcon={
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__nj7SK)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToPriceCard"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "navigation",
                                    interactionUuid: "DLyvrAo77",
                                    componentUuid: "AAi9AuCCbMra",
                                    argName: "destination"
                                  },
                                  () => "/#price-card"
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "DLyvrAo77",
                                  componentUuid: "AAi9AuCCbMra"
                                },
                                () =>
                                  (({ destination }) => {
                                    __nextRouter?.push(destination);
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["goToPriceCard"] === "object" &&
                          typeof $steps["goToPriceCard"].then === "function"
                        ) {
                          $steps["goToPriceCard"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "DLyvrAo77",
                              componentUuid: "AAi9AuCCbMra"
                            },
                            $steps["goToPriceCard"]
                          );
                        }
                      }}
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rdeBy
                        )}
                      >
                        {"价格"}
                      </div>
                    </Button>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__fDDk1
                      )}
                      color={"clear"}
                      endIcon={
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__f9CPs)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToAboutus"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "navigation",
                                    interactionUuid: "t9EyezZeT",
                                    componentUuid: "AAi9AuCCbMra",
                                    argName: "destination"
                                  },
                                  () => "/aboutus"
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "t9EyezZeT",
                                  componentUuid: "AAi9AuCCbMra"
                                },
                                () =>
                                  (({ destination }) => {
                                    __nextRouter?.push(destination);
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["goToAboutus"] === "object" &&
                          typeof $steps["goToAboutus"].then === "function"
                        ) {
                          $steps["goToAboutus"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "t9EyezZeT",
                              componentUuid: "AAi9AuCCbMra"
                            },
                            $steps["goToAboutus"]
                          );
                        }
                      }}
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kNtlw
                        )}
                      >
                        {"关于我们"}
                      </div>
                    </Button>
                  ) : null}
                  <Button
                    className={classNames("__wab_instance", sty.button__a1X34)}
                    color={"green"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__kzRcy)}
                        role={"img"}
                      />
                    }
                    link={`/register`}
                    size={"compact"}
                    submitsForm={false}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0U4Qk
                      )}
                    >
                      {"免费注册"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__t5W)}
                    color={"softGreen"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__bEOsd)}
                        role={"img"}
                      />
                    }
                    link={`/login`}
                    size={"compact"}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7Dt8L
                      )}
                    >
                      {"登录"}
                    </div>
                  </Button>
                </p.Stack>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mvYgQ)}
                  >
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button___8Xvrc
                      )}
                    >
                      {"Sign up"}
                    </button>
                    {true ? (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___2R0VD
                        )}
                        color={"clear"}
                        endIcon={
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__pQht0
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__usbzz
                          )}
                        >
                          {"Log in"}
                        </div>
                      </Button>
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>
          </div>
          <p.Stack
            as={"div"}
            data-plasmic-name={"foreground"}
            data-plasmic-override={overrides.foreground}
            hasGap={true}
            className={classNames(projectcss.all, sty.foreground)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ruOkm)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__eq44B)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dw9Bx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pIBiS
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#5F25A2" }}
                        >
                          {"机智"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FF9100" }}
                        >
                          {"桔子 "}
                        </span>
                        <React.Fragment>{"\n"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#686868" }}
                        >
                          {"您的智能AI时代好助手！"}
                        </span>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__efmCb
                      )}
                    >
                      {"更强大的赋能，AI让创作者会走的更远..."}
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___8HFnL
                      )}
                      color={"green"}
                      link={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? `/workspaces`
                          : undefined
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ux5D
                        )}
                      >
                        {"马上体验"}
                      </div>
                    </Button>
                  </p.Stack>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__vzl5)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "337px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/chats_client/images/headerpng.png",
                      fullWidth: 1000,
                      fullHeight: 733,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__qfCrU)}>
              <section
                data-plasmic-name={"value"}
                data-plasmic-override={overrides.value}
                className={classNames(projectcss.all, sty.value)}
                id={"desc-value"}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground4"}
                  data-plasmic-override={overrides.foreground4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground4)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___72Cv)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__l5Mxs)}
                    >
                      <h2
                        data-plasmic-name={"h2"}
                        data-plasmic-override={overrides.h2}
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2
                        )}
                      >
                        {"智能掌握，高效写作"}
                      </h2>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5Mw
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "帮助您提高工作效率，节约时间和精力，同时提高文章质量和更多独到创意"
                          : "帮助您提高工作效率，节约时间和精力，同时提高文章质量和更多独到创意"}
                      </div>
                    </div>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__pnErq)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wj0Iy)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__k8BRz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gIlWv
                          )}
                        >
                          <Icon33Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xWo1H
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__koAi
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__s3Gy
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lWn4O
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aDzfr
                            )}
                          >
                            {"新的效率"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__acCkg
                            )}
                          >
                            {
                              "通过使用人工智能技术来自动生成文章和文档，从而大大节省创作时间。"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mRSkl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qMww
                          )}
                        >
                          <Icon34Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___3Cgqe
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lM2WS
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ifn3J
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__o3UTj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wGTo
                            )}
                          >
                            {"优化文章质量"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___036Ah
                            )}
                          >
                            {
                              "强大功能可提供文本分析、结构分析、语法检查等服务，帮助提升文章质量"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sfWlx
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__whIH
                          )}
                        >
                          <Icon35Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__nbUyu
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jAAvD
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ykmo0
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lXxi0
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__enbcG
                            )}
                          >
                            {"随叫随到"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jeQnA
                            )}
                          >
                            {
                              "24小时不间断的写作助手，您可以随时使用，而无需担心工作时间和地点等限制。"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dhLou)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sycim)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__l1Y79
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jiJyo
                          )}
                        >
                          <Icon36Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fu7BA
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__a8BR9
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__bseyL
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bXp4V
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__y6H89
                            )}
                          >
                            {"个性化定制"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gTn6T
                            )}
                          >
                            {
                              "个性化的定制功能，可以根据用户需求，提供量身定制的解决方案，更好地满足特定需求。"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eP7Gf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__up9In
                          )}
                        >
                          <Icon37Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kdMbn
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nov7G
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qFwr0
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lzNK
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hZUzw
                            )}
                          >
                            {"实时分析"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nNyX
                            )}
                          >
                            {
                              "提供相关的数据分析报告和建议，协助用户做出更好的管理决策。"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xz2CT
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jJsQd
                          )}
                        >
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__cRj0
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___0D4Pb
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jala
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lReT
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oqnEs
                            )}
                          >
                            {"省钱省心"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aNm39
                            )}
                          >
                            {
                              "简化写作过程，提高效率并减少错误，使得您将时间精力用在更有价值事情上，带来更好的经济回报"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </section>
            </div>
          ) : null}
          <div
            data-plasmic-name={"price"}
            data-plasmic-override={overrides.price}
            className={classNames(projectcss.all, sty.price)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
              id={"price-card"}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__b70IF)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___5KzDf)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9HD0J
                    )}
                  >
                    {"加入会员，获取专属模板，提升字数额度"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l5FPi
                  )}
                >
                  {
                    "希望您的支持确保我们的产品始终处于最新状态。我们将持续优化我们的产品，为您提供最佳的用户体验。"
                  }
                </div>
              </p.Stack>
              <Price
                data-plasmic-name={"price2"}
                data-plasmic-override={overrides.price2}
                className={classNames("__wab_instance", sty.price2)}
              />
            </p.Stack>
          </div>
          <p.Stack
            as={"div"}
            data-plasmic-name={"about"}
            data-plasmic-override={overrides.about}
            hasGap={true}
            className={classNames(projectcss.all, sty.about)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground3"}
              data-plasmic-override={overrides.foreground3}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground3)}
              id={"aboutus"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rfMyL
                )}
              >
                {"乘上效率浪潮，成为超级个体！"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sPTwg
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "我们全力拥抱人工智能技术，旨在提供最优秀的工具，助力您的企业实现效率的最大化和最优化。"
                  : "我们全力拥抱人工智能技术，旨在提供最优秀的工具，助力您的企业实现效率的最大化和最优化。"}
              </div>
            </p.Stack>
          </p.Stack>
          <div
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames(projectcss.all, sty.footer)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__deD1T)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kIDkD)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__dTGo3)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"180px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    src={{
                      src: "/plasmic/chats_client/images/logofull2Xpng.png",
                      fullWidth: 346,
                      fullHeight: 96,
                      aspectRatio: undefined
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tNcGo)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yHyWq
                      )}
                    >
                      {"联系我们"}
                    </div>
                  </p.Stack>
                </p.Stack>
              </div>
              <div className={classNames(projectcss.all, sty.column__kHzbo)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tPq5K)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tdgbs
                    )}
                  >
                    {"产品"}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button___1N0I5)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__nAuG1)}
                        role={"img"}
                      />
                    }
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToPriceCard"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "V-t2n-yeU",
                                  componentUuid: "AAi9AuCCbMra",
                                  argName: "destination"
                                },
                                () => "/#price-card"
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "V-t2n-yeU",
                                componentUuid: "AAi9AuCCbMra"
                              },
                              () =>
                                (({ destination }) => {
                                  __nextRouter?.push(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToPriceCard"] === "object" &&
                        typeof $steps["goToPriceCard"].then === "function"
                      ) {
                        $steps["goToPriceCard"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "V-t2n-yeU",
                            componentUuid: "AAi9AuCCbMra"
                          },
                          $steps["goToPriceCard"]
                        );
                      }
                    }}
                    size={"minimal"}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gKtby
                      )}
                    >
                      {"价格"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__dnsbo)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__twP4S)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kJznj
                      )}
                    >
                      {"登录"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__szD65)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__rBdXb)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rfyFt
                      )}
                    >
                      {"使用说明"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button___3NAr6)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___8F13T)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rtk4A
                      )}
                    >
                      {"关于我们"}
                    </div>
                  </Button>
                </p.Stack>
              </div>
              <div className={classNames(projectcss.all, sty.column__vH077)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hm0IO)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f04Hl
                    )}
                  >
                    {"Support"}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__gtZoB)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__mNthj)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zPfyo
                      )}
                    >
                      {"说明文档"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button___2M31F)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__qHwtp)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hBcwJ
                      )}
                    >
                      {"FAQs常见问题"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__tWbr)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__zzpFk)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e639I
                      )}
                    >
                      {"联系方式"}
                    </div>
                  </Button>
                </p.Stack>
              </div>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "foreground",
    "value",
    "foreground4",
    "h2",
    "price",
    "foreground2",
    "price2",
    "about",
    "foreground3",
    "footer",
    "columns"
  ],

  foreground: ["foreground"],
  value: ["value", "foreground4", "h2"],
  foreground4: ["foreground4", "h2"],
  h2: ["h2"],
  price: ["price", "foreground2", "price2"],
  foreground2: ["foreground2", "price2"],
  price2: ["price2"],
  about: ["about", "foreground3"],
  foreground3: ["foreground3"],
  footer: ["footer", "columns"],
  columns: ["columns"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground: makeNodeComponent("foreground"),
    value: makeNodeComponent("value"),
    foreground4: makeNodeComponent("foreground4"),
    h2: makeNodeComponent("h2"),
    price: makeNodeComponent("price"),
    foreground2: makeNodeComponent("foreground2"),
    price2: makeNodeComponent("price2"),
    about: makeNodeComponent("about"),
    foreground3: makeNodeComponent("foreground3"),
    footer: makeNodeComponent("footer"),
    columns: makeNodeComponent("columns"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Key-value metadata
    metadata: {
      charset: "utf-8",
      name: "viewport",
      content: "width=750,inital-scale=1.0,maximum-scale=1.0,user-scalable=no"
    },
    // Page metadata
    pageMetadata: {
      title: "机智桔子-你的AI助手",
      description: "提高产出10倍，这个AI时代，你需要新的效率工具。",
      ogImageSrc:
        "https://site-assets.plasmic.app/5a3fcd1a01a06a23046dc80f21312272.png",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
