// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: l2Kc8Ybaed
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { TabContent } from "@plasmicpkgs/plasmic-tabs"; // plasmic-import: KyRr6GQ_tPI/codeComponent
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs"; // plasmic-import: qT-BBamUwNg/codeComponent
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs"; // plasmic-import: 7uvxnLIBlo3/codeComponent
import { TabButton } from "@plasmicpkgs/plasmic-tabs"; // plasmic-import: 5jaBI7A4_ak/codeComponent
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import PriceBlock from "../../PriceBlock"; // plasmic-import: p-zh9SOwnv/component
import Button2 from "../../Button"; // plasmic-import: YO5Bwb9purCqu/component
import PriceIcons from "../../PriceIcons"; // plasmic-import: 8zXNIjCzZD/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal"; // plasmic-import: xx93QbkHH5i/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicPayItems.module.css"; // plasmic-import: l2Kc8Ybaed/css
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: 64FJ52jbDe/icon
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: KwgRFQ7Ftc/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: 2o24QZW282/icon
import Icon31Icon from "./icons/PlasmicIcon__Icon31"; // plasmic-import: q5iABjZmCP/icon
import Icon32Icon from "./icons/PlasmicIcon__Icon32"; // plasmic-import: 69yPGVOe6C/icon

export const PlasmicPayItems__VariantProps = new Array();

export const PlasmicPayItems__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPayItems__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <TabContent
        className={classNames("__wab_instance", sty.tabContent___7Zg3H)}
      >
        <TabsContainer
          data-plasmic-name={"tabsContainer"}
          data-plasmic-override={overrides.tabsContainer}
          className={classNames("__wab_instance", sty.tabsContainer)}
          initialKey={"tab1"}
          previewAll={false}
        >
          <ph.DataCtxReader>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__xyS2)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__w6Qxw)}
                >
                  {true ? (
                    <TabUnderline
                      data-plasmic-name={"tabUnderline"}
                      data-plasmic-override={overrides.tabUnderline}
                      className={classNames("__wab_instance", sty.tabUnderline)}
                    />
                  ) : null}
                  <TabButton
                    className={classNames(
                      "__wab_instance",
                      sty.tabButton__m2R0D
                    )}
                    tabKey={"tab1"}
                  >
                    <Button color={"softGreen"} endIcon={null} startIcon={null}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1YmY
                        )}
                      >
                        {"普通版"}
                      </div>
                    </Button>
                  </TabButton>
                  <TabButton
                    className={classNames(
                      "__wab_instance",
                      sty.tabButton__ux9Rb
                    )}
                    tabKey={"tab2"}
                  >
                    <Button color={"softGreen"} endIcon={null} startIcon={null}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wq7RA
                        )}
                      >
                        {"会员版"}
                      </div>
                    </Button>
                  </TabButton>
                  <TabButton
                    className={classNames(
                      "__wab_instance",
                      sty.tabButton___2Wk6H
                    )}
                    tabKey={"tab3"}
                  >
                    <Button color={"softGreen"} endIcon={null} startIcon={null}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8BAdH
                        )}
                      >
                        {"专业版"}
                      </div>
                    </Button>
                  </TabButton>
                </p.Stack>
                <div className={classNames(projectcss.all, sty.freeBox__ahXJ)}>
                  <TabContent
                    className={classNames(
                      "__wab_instance",
                      sty.tabContent___9DMok
                    )}
                    tabKey={"tab1"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__o36Si)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__m5B91
                        )}
                      >
                        {true ? (
                          <PriceBlock
                            data-plasmic-name={"price1"}
                            data-plasmic-override={overrides.price1}
                            className={classNames("__wab_instance", sty.price1)}
                            mainPrice={15}
                            preDay={"折合2.43元每天"}
                            selected={true}
                            slot={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yWjc3
                                )}
                              >
                                {"1个月"}
                              </div>
                            }
                          />
                        ) : null}
                        {true ? (
                          <PriceBlock
                            data-plasmic-name={"price2"}
                            data-plasmic-override={overrides.price2}
                            className={classNames("__wab_instance", sty.price2)}
                            mainPrice={182}
                            preDay={"折合2.43元每天"}
                          />
                        ) : null}
                      </div>
                      <Button2
                        data-plasmic-name={"btn1"}
                        data-plasmic-override={overrides.btn1}
                        className={classNames("__wab_instance", sty.btn1)}
                        color={"green"}
                        link={undefined}
                        onClick={async event => {
                          const $steps = {};
                          $steps["updateModalOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "bj5JutBcW",
                                      componentUuid: "l2Kc8Ybaed",
                                      argName: "variable"
                                    },
                                    () => ({
                                      objRoot: $state,
                                      variablePath: ["modal", "open"]
                                    })
                                  ),
                                  operation: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "bj5JutBcW",
                                      componentUuid: "l2Kc8Ybaed",
                                      argName: "operation"
                                    },
                                    () => 0
                                  ),
                                  value: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "bj5JutBcW",
                                      componentUuid: "l2Kc8Ybaed",
                                      argName: "value"
                                    },
                                    () => true
                                  )
                                };
                                return __wrapUserFunction(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "updateVariable",
                                    interactionUuid: "bj5JutBcW",
                                    componentUuid: "l2Kc8Ybaed"
                                  },
                                  () =>
                                    (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;
                                      p.set(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]),
                                  actionArgs
                                );
                              })()
                            : undefined;
                          if (
                            typeof $steps["updateModalOpen"] === "object" &&
                            typeof $steps["updateModalOpen"].then === "function"
                          ) {
                            $steps["updateModalOpen"] = await __wrapUserPromise(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariable",
                                interactionUuid: "bj5JutBcW",
                                componentUuid: "l2Kc8Ybaed"
                              },
                              $steps["updateModalOpen"]
                            );
                          }
                        }}
                      >
                        {"确认并支付"}
                      </Button2>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qipE6
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___1CsOm
                            )}
                          >
                            <PriceIcons
                              data-plasmic-name={"icon"}
                              data-plasmic-override={overrides.icon}
                              className={classNames("__wab_instance", sty.icon)}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tqUj
                              )}
                            >
                              {"20000字/月"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5W8Zo
                            )}
                          >
                            <PriceIcons
                              data-plasmic-name={"icon2"}
                              data-plasmic-override={overrides.icon2}
                              className={classNames(
                                "__wab_instance",
                                sty.icon2
                              )}
                            >
                              <Icon27Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__naa52
                                )}
                                role={"img"}
                              />
                            </PriceIcons>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jyl7D
                              )}
                            >
                              {"AI续写文章"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__h90L
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oZuAx
                              )}
                            >
                              <Icon29Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__maicM
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9AbeZ
                              )}
                            >
                              {"语气设置"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__calxE
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jlRK
                              )}
                            >
                              <Icon30Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__mHlR
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dUq9
                              )}
                            >
                              {"实时保存"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eJHsI
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__uq9Z
                              )}
                            >
                              <Icon31Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__fxfUt
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qENuG
                              )}
                            >
                              {"全文翻新"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__a4UD8
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ql3Z
                              )}
                            >
                              <Icon32Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__jt6QT
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ahe1N
                              )}
                            >
                              {"全文生成"}
                            </div>
                          </p.Stack>
                        ) : null}
                      </div>
                    </div>
                  </TabContent>
                  <TabContent
                    className={classNames(
                      "__wab_instance",
                      sty.tabContent___3YRlf
                    )}
                    tabKey={"tab2"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__stUcM)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0YoCn
                        )}
                      >
                        {true ? (
                          <PriceBlock
                            data-plasmic-name={"price3"}
                            data-plasmic-override={overrides.price3}
                            className={classNames("__wab_instance", sty.price3)}
                            mainPrice={50}
                            preDay={"折合2.43元每天"}
                            slot={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gAub8
                                )}
                              >
                                {"1个月"}
                              </div>
                            }
                          />
                        ) : null}
                        {true ? (
                          <PriceBlock
                            data-plasmic-name={"price4"}
                            data-plasmic-override={overrides.price4}
                            className={classNames("__wab_instance", sty.price4)}
                            mainPrice={480}
                            preDay={"折合2.43元每天"}
                          />
                        ) : null}
                      </div>
                      <Button2
                        data-plasmic-name={"btn2"}
                        data-plasmic-override={overrides.btn2}
                        className={classNames("__wab_instance", sty.btn2)}
                        color={"green"}
                        link={undefined}
                        onClick={async event => {
                          const $steps = {};
                          $steps["updateModalOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "Oc8y749fN",
                                      componentUuid: "l2Kc8Ybaed",
                                      argName: "variable"
                                    },
                                    () => ({
                                      objRoot: $state,
                                      variablePath: ["modal", "open"]
                                    })
                                  ),
                                  operation: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "Oc8y749fN",
                                      componentUuid: "l2Kc8Ybaed",
                                      argName: "operation"
                                    },
                                    () => 0
                                  ),
                                  value: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "Oc8y749fN",
                                      componentUuid: "l2Kc8Ybaed",
                                      argName: "value"
                                    },
                                    () => true
                                  )
                                };
                                return __wrapUserFunction(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "updateVariable",
                                    interactionUuid: "Oc8y749fN",
                                    componentUuid: "l2Kc8Ybaed"
                                  },
                                  () =>
                                    (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;
                                      p.set(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]),
                                  actionArgs
                                );
                              })()
                            : undefined;
                          if (
                            typeof $steps["updateModalOpen"] === "object" &&
                            typeof $steps["updateModalOpen"].then === "function"
                          ) {
                            $steps["updateModalOpen"] = await __wrapUserPromise(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariable",
                                interactionUuid: "Oc8y749fN",
                                componentUuid: "l2Kc8Ybaed"
                              },
                              $steps["updateModalOpen"]
                            );
                          }
                        }}
                      >
                        {"确认并支付"}
                      </Button2>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cwcDz
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zev9G
                            )}
                          >
                            <PriceIcons
                              data-plasmic-name={"icon3"}
                              data-plasmic-override={overrides.icon3}
                              className={classNames(
                                "__wab_instance",
                                sty.icon3
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__c8NPc
                              )}
                            >
                              {"50000字/月"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__g9L3
                            )}
                          >
                            <PriceIcons
                              data-plasmic-name={"icon4"}
                              data-plasmic-override={overrides.icon4}
                              className={classNames(
                                "__wab_instance",
                                sty.icon4
                              )}
                            >
                              <Icon27Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__n1W3
                                )}
                                role={"img"}
                              />
                            </PriceIcons>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__h7Dm2
                              )}
                            >
                              {"AI续写文章"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__siqNn
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yLtIt
                              )}
                            >
                              <Icon29Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xDb3Z
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__v5HXt
                              )}
                            >
                              {"语气设置"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eJfg
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ayVov
                              )}
                            >
                              <Icon30Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__s6Gx0
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3YFeb
                              )}
                            >
                              {"实时保存"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__p80K0
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zGYxJ
                              )}
                            >
                              <Icon31Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__jL0Zs
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__q6Fi
                              )}
                            >
                              {"全文翻新"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gvUsz
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yjeTq
                              )}
                            >
                              <Icon32Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___4SpGg
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hN4Si
                              )}
                            >
                              {"全文生成"}
                            </div>
                          </p.Stack>
                        ) : null}
                      </div>
                    </div>
                  </TabContent>
                  <TabContent
                    className={classNames(
                      "__wab_instance",
                      sty.tabContent___6LOii
                    )}
                    tabKey={"tab3"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yrawp)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6BbBz
                        )}
                      >
                        {true ? (
                          <PriceBlock
                            data-plasmic-name={"price5"}
                            data-plasmic-override={overrides.price5}
                            className={classNames("__wab_instance", sty.price5)}
                            mainPrice={190}
                            preDay={"折合2.43元每天"}
                            slot={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dkh1C
                                )}
                              >
                                {"1个月"}
                              </div>
                            }
                          />
                        ) : null}
                        {true ? (
                          <PriceBlock
                            data-plasmic-name={"price6"}
                            data-plasmic-override={overrides.price6}
                            className={classNames("__wab_instance", sty.price6)}
                            mainPrice={1824}
                            preDay={"折合2.43元每天"}
                          />
                        ) : null}
                      </div>
                      <Button2
                        data-plasmic-name={"btn3"}
                        data-plasmic-override={overrides.btn3}
                        className={classNames("__wab_instance", sty.btn3)}
                        color={"green"}
                        link={undefined}
                        onClick={async event => {
                          const $steps = {};
                          $steps["updateModalOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "FZw943V7I",
                                      componentUuid: "l2Kc8Ybaed",
                                      argName: "variable"
                                    },
                                    () => ({
                                      objRoot: $state,
                                      variablePath: ["modal", "open"]
                                    })
                                  ),
                                  operation: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "FZw943V7I",
                                      componentUuid: "l2Kc8Ybaed",
                                      argName: "operation"
                                    },
                                    () => 0
                                  ),
                                  value: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "FZw943V7I",
                                      componentUuid: "l2Kc8Ybaed",
                                      argName: "value"
                                    },
                                    () => true
                                  )
                                };
                                return __wrapUserFunction(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "updateVariable",
                                    interactionUuid: "FZw943V7I",
                                    componentUuid: "l2Kc8Ybaed"
                                  },
                                  () =>
                                    (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;
                                      p.set(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]),
                                  actionArgs
                                );
                              })()
                            : undefined;
                          if (
                            typeof $steps["updateModalOpen"] === "object" &&
                            typeof $steps["updateModalOpen"].then === "function"
                          ) {
                            $steps["updateModalOpen"] = await __wrapUserPromise(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariable",
                                interactionUuid: "FZw943V7I",
                                componentUuid: "l2Kc8Ybaed"
                              },
                              $steps["updateModalOpen"]
                            );
                          }
                        }}
                      >
                        {"确认并支付"}
                      </Button2>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mYsq
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eVxEw
                            )}
                          >
                            <PriceIcons
                              data-plasmic-name={"icon5"}
                              data-plasmic-override={overrides.icon5}
                              className={classNames(
                                "__wab_instance",
                                sty.icon5
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__as3C
                              )}
                            >
                              {"300k字/月"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sIn6A
                            )}
                          >
                            <PriceIcons
                              data-plasmic-name={"icon6"}
                              data-plasmic-override={overrides.icon6}
                              className={classNames(
                                "__wab_instance",
                                sty.icon6
                              )}
                            >
                              <Icon27Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hf009
                                )}
                                role={"img"}
                              />
                            </PriceIcons>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qwUxm
                              )}
                            >
                              {"AI续写文章"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___82V9H
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ceSbu
                              )}
                            >
                              <Icon29Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__kRcrg
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nkQkX
                              )}
                            >
                              {"语气设置"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__o67U
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vPzy6
                              )}
                            >
                              <Icon30Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__nsAoE
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pYgGk
                              )}
                            >
                              {"实时保存"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__syJ2O
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__c5Mq
                              )}
                            >
                              <Icon31Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__bvnei
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hSvjv
                              )}
                            >
                              {"全文翻新"}
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___6Syly
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__m4LfM
                              )}
                            >
                              <Icon32Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___25QMi
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xta5E
                              )}
                            >
                              {"全文生成"}
                            </div>
                          </p.Stack>
                        ) : null}
                      </div>
                    </div>
                  </TabContent>
                </div>
              </div>
            )}
          </ph.DataCtxReader>
        </TabsContainer>
      </TabContent>
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens
        )}
        footer={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__x1GWq
            )}
          >
            {"选择后将跳转支付"}
          </div>
        }
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={p.generateStateOnChangeProp($state, ["modal", "open"])}
        open={p.generateStateValueProp($state, ["modal", "open"])}
        title={"选择支付方式"}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qChkw)}
        >
          <Button2
            data-plasmic-name={"aliPayBtn"}
            data-plasmic-override={overrides.aliPayBtn}
            className={classNames("__wab_instance", sty.aliPayBtn)}
            color={"blue"}
          >
            {"支付宝支付"}
          </Button2>
          <Button2
            data-plasmic-name={"wechatPayBtn"}
            data-plasmic-override={overrides.wechatPayBtn}
            className={classNames("__wab_instance", sty.wechatPayBtn)}
            color={"green"}
          >
            {"微 信 支 付"}
          </Button2>
        </p.Stack>
      </AntdModal>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tabsContainer",
    "tabUnderline",
    "price1",
    "price2",
    "btn1",
    "icon",
    "icon2",
    "price3",
    "price4",
    "btn2",
    "icon3",
    "icon4",
    "price5",
    "price6",
    "btn3",
    "icon5",
    "icon6",
    "modal",
    "aliPayBtn",
    "wechatPayBtn"
  ],

  tabsContainer: [
    "tabsContainer",
    "tabUnderline",
    "price1",
    "price2",
    "btn1",
    "icon",
    "icon2",
    "price3",
    "price4",
    "btn2",
    "icon3",
    "icon4",
    "price5",
    "price6",
    "btn3",
    "icon5",
    "icon6"
  ],

  tabUnderline: ["tabUnderline"],
  price1: ["price1"],
  price2: ["price2"],
  btn1: ["btn1"],
  icon: ["icon"],
  icon2: ["icon2"],
  price3: ["price3"],
  price4: ["price4"],
  btn2: ["btn2"],
  icon3: ["icon3"],
  icon4: ["icon4"],
  price5: ["price5"],
  price6: ["price6"],
  btn3: ["btn3"],
  icon5: ["icon5"],
  icon6: ["icon6"],
  modal: ["modal", "aliPayBtn", "wechatPayBtn"],
  aliPayBtn: ["aliPayBtn"],
  wechatPayBtn: ["wechatPayBtn"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPayItems__ArgProps,
          internalVariantPropNames: PlasmicPayItems__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPayItems__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPayItems";
  } else {
    func.displayName = `PlasmicPayItems.${nodeName}`;
  }
  return func;
}

export const PlasmicPayItems = Object.assign(
  // Top-level PlasmicPayItems renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    price1: makeNodeComponent("price1"),
    price2: makeNodeComponent("price2"),
    btn1: makeNodeComponent("btn1"),
    icon: makeNodeComponent("icon"),
    icon2: makeNodeComponent("icon2"),
    price3: makeNodeComponent("price3"),
    price4: makeNodeComponent("price4"),
    btn2: makeNodeComponent("btn2"),
    icon3: makeNodeComponent("icon3"),
    icon4: makeNodeComponent("icon4"),
    price5: makeNodeComponent("price5"),
    price6: makeNodeComponent("price6"),
    btn3: makeNodeComponent("btn3"),
    icon5: makeNodeComponent("icon5"),
    icon6: makeNodeComponent("icon6"),
    modal: makeNodeComponent("modal"),
    aliPayBtn: makeNodeComponent("aliPayBtn"),
    wechatPayBtn: makeNodeComponent("wechatPayBtn"),
    // Metadata about props expected for PlasmicPayItems
    internalVariantProps: PlasmicPayItems__VariantProps,
    internalArgProps: PlasmicPayItems__ArgProps
  }
);

export default PlasmicPayItems;
/* prettier-ignore-end */
