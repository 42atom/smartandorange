// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: l2Kc8Ybaed
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { TabContent } from "@plasmicpkgs/plasmic-tabs"; // plasmic-import: KyRr6GQ_tPI/codeComponent
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs"; // plasmic-import: qT-BBamUwNg/codeComponent
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs"; // plasmic-import: 7uvxnLIBlo3/codeComponent
import { TabButton } from "@plasmicpkgs/plasmic-tabs"; // plasmic-import: 5jaBI7A4_ak/codeComponent
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import PriceBlock from "../../PriceBlock"; // plasmic-import: p-zh9SOwnv/component
import Button2 from "../../Button"; // plasmic-import: YO5Bwb9purCqu/component
import PriceIcons from "../../PriceIcons"; // plasmic-import: 8zXNIjCzZD/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal"; // plasmic-import: xx93QbkHH5i/codeComponent
import { useScreenVariants as useScreenVariantsnl9I0Oib3VOwY } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nl9_I0oib3VOwY/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicPayItems.module.css"; // plasmic-import: l2Kc8Ybaed/css
import Icon26Icon from "./icons/PlasmicIcon__Icon26"; // plasmic-import: 6SiL4R3w_-/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: 64FJ52jbDe/icon
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: KwgRFQ7Ftc/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: 2o24QZW282/icon
import Icon31Icon from "./icons/PlasmicIcon__Icon31"; // plasmic-import: q5iABjZmCP/icon
import Icon32Icon from "./icons/PlasmicIcon__Icon32"; // plasmic-import: 69yPGVOe6C/icon

export const PlasmicPayItems__VariantProps = new Array();

export const PlasmicPayItems__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPayItems__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "price1.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => "isSelected"
      },
      {
        path: "price2.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "price5.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "price6.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnl9I0Oib3VOwY()
  });
  return true ? (
    <div
      data-plasmic-name={"payPanel"}
      data-plasmic-override={overrides.payPanel}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.payPanel
      )}
    >
      <TabContent
        className={classNames("__wab_instance", sty.tabContent___7Zg3H)}
      >
        <TabsContainer
          data-plasmic-name={"tabsContainer"}
          data-plasmic-override={overrides.tabsContainer}
          className={classNames("__wab_instance", sty.tabsContainer)}
          initialKey={"tab1"}
          previewAll={
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          }
          previewKey={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "tab2" : "tab2"
          }
        >
          <ph.DataCtxReader>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__xyS2)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__w6Qxw)}
                  >
                    {true ? (
                      <TabUnderline
                        data-plasmic-name={"tabUnderline"}
                        data-plasmic-override={overrides.tabUnderline}
                        className={classNames(
                          "__wab_instance",
                          sty.tabUnderline
                        )}
                      />
                    ) : null}
                    <TabButton
                      className={classNames(
                        "__wab_instance",
                        sty.tabButton__m2R0D
                      )}
                      tabKey={"tab1"}
                    >
                      <Button
                        color={"softGreen"}
                        endIcon={null}
                        startIcon={null}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1YmY
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{"会员版 \n"}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 200 }}
                            >
                              {"VIP 1"}
                            </span>
                          </React.Fragment>
                        </div>
                      </Button>
                    </TabButton>
                    <TabButton
                      className={classNames(
                        "__wab_instance",
                        sty.tabButton___2Wk6H
                      )}
                      tabKey={"tab3"}
                    >
                      <Button
                        color={"softGreen"}
                        endIcon={null}
                        startIcon={null}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8BAdH
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{"专业版\n"}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 100 }}
                            >
                              {"VIP 2"}
                            </span>
                          </React.Fragment>
                        </div>
                      </Button>
                    </TabButton>
                  </p.Stack>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__tSjli)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8UdWd
                    )}
                  >
                    {"测试期间，充值会员价格优惠，活动时间6月1日-6月30日"}
                  </div>
                </div>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ahXJ)}
                  >
                    <TabContent
                      className={classNames(
                        "__wab_instance",
                        sty.tabContent___9DMok
                      )}
                      tabKey={"tab1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__o36Si
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__m5B91
                          )}
                        >
                          {true ? (
                            <PriceBlock
                              data-plasmic-name={"price1"}
                              data-plasmic-override={overrides.price1}
                              className={classNames(
                                "__wab_instance",
                                sty.price1
                              )}
                              isDiscount={"discountOn"}
                              isSelected={p.generateStateValueProp($state, [
                                "price1",
                                "isSelected"
                              ])}
                              onIsSelectedChange={p.generateStateOnChangeProp(
                                $state,
                                ["price1", "isSelected"]
                              )}
                              preDay={"折合0.6元每天"}
                              price={"19"}
                              slot={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yWjc3
                                  )}
                                >
                                  {"1个月"}
                                </div>
                              }
                              version={"普通版月付"}
                            />
                          ) : null}
                          {true ? (
                            <PriceBlock
                              data-plasmic-name={"price2"}
                              data-plasmic-override={overrides.price2}
                              className={classNames(
                                "__wab_instance",
                                sty.price2
                              )}
                              isSelected={p.generateStateValueProp($state, [
                                "price2",
                                "isSelected"
                              ])}
                              onIsSelectedChange={p.generateStateOnChangeProp(
                                $state,
                                ["price2", "isSelected"]
                              )}
                              preDay={"折合0.5元每天"}
                              price={"182"}
                              version={"普通版年付"}
                            />
                          ) : null}
                        </div>
                        <Button2
                          data-plasmic-name={"btn1"}
                          data-plasmic-override={overrides.btn1}
                          className={classNames("__wab_instance", sty.btn1)}
                          color={"green"}
                          link={undefined}
                          onClick={async event => {
                            const $steps = {};
                            $steps["updateModalOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "bj5JutBcW",
                                        componentUuid: "l2Kc8Ybaed",
                                        argName: "variable"
                                      },
                                      () => ({
                                        objRoot: $state,
                                        variablePath: ["modal", "open"]
                                      })
                                    ),
                                    operation: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "bj5JutBcW",
                                        componentUuid: "l2Kc8Ybaed",
                                        argName: "operation"
                                      },
                                      () => 0
                                    ),
                                    value: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "bj5JutBcW",
                                        componentUuid: "l2Kc8Ybaed",
                                        argName: "value"
                                      },
                                      () => true
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "bj5JutBcW",
                                      componentUuid: "l2Kc8Ybaed"
                                    },
                                    () =>
                                      (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;
                                        p.set(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["updateModalOpen"] === "object" &&
                              typeof $steps["updateModalOpen"].then ===
                                "function"
                            ) {
                              $steps["updateModalOpen"] =
                                await __wrapUserPromise(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "updateVariable",
                                    interactionUuid: "bj5JutBcW",
                                    componentUuid: "l2Kc8Ybaed"
                                  },
                                  $steps["updateModalOpen"]
                                );
                            }
                          }}
                        >
                          {"确认并支付"}
                        </Button2>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qipE6
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___1CsOm
                              )}
                            >
                              <PriceIcons
                                data-plasmic-name={"icon"}
                                data-plasmic-override={overrides.icon}
                                className={classNames(
                                  "__wab_instance",
                                  sty.icon
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tqUj
                                )}
                              >
                                {"20000字/月"}
                              </div>
                            </p.Stack>
                          ) : null}
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___2SEy1
                              )}
                            >
                              <PriceIcons
                                data-plasmic-name={"icon7"}
                                data-plasmic-override={overrides.icon7}
                                className={classNames(
                                  "__wab_instance",
                                  sty.icon7
                                )}
                              >
                                <p.PlasmicIcon
                                  PlasmicIconType={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? Icon27Icon
                                      : Icon26Icon
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__xoUY
                                  )}
                                  role={"img"}
                                />
                              </PriceIcons>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9X0Z3
                                )}
                              >
                                {"多种模板"}
                              </div>
                            </p.Stack>
                          ) : null}
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___1RjDd
                              )}
                            >
                              <PriceIcons
                                data-plasmic-name={"icon8"}
                                data-plasmic-override={overrides.icon8}
                                className={classNames(
                                  "__wab_instance",
                                  sty.icon8
                                )}
                              >
                                <Icon29Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__zhMmy
                                  )}
                                  role={"img"}
                                />
                              </PriceIcons>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xGsea
                                )}
                              >
                                {"语气设置"}
                              </div>
                            </p.Stack>
                          ) : null}
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___5W8Zo
                              )}
                            >
                              <PriceIcons
                                data-plasmic-name={"icon2"}
                                data-plasmic-override={overrides.icon2}
                                className={classNames(
                                  "__wab_instance",
                                  sty.icon2
                                )}
                              >
                                <Icon30Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__naa52
                                  )}
                                  role={"img"}
                                />
                              </PriceIcons>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jyl7D
                                )}
                              >
                                {"实时保存"}
                              </div>
                            </p.Stack>
                          ) : null}
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___9Z8X
                              )}
                            >
                              <PriceIcons
                                data-plasmic-name={"icon9"}
                                data-plasmic-override={overrides.icon9}
                                className={classNames(
                                  "__wab_instance",
                                  sty.icon9
                                )}
                              >
                                <Icon31Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___7TOjv
                                  )}
                                  role={"img"}
                                />
                              </PriceIcons>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rGacQ
                                )}
                              >
                                {"智能助手"}
                              </div>
                            </p.Stack>
                          ) : null}
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__aRsus
                              )}
                            >
                              <PriceIcons
                                data-plasmic-name={"icon10"}
                                data-plasmic-override={overrides.icon10}
                                className={classNames(
                                  "__wab_instance",
                                  sty.icon10
                                )}
                              >
                                <Icon32Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__fwBx8
                                  )}
                                  role={"img"}
                                />
                              </PriceIcons>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hsuq6
                                )}
                              >
                                {"全文生成"}
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                      </div>
                    </TabContent>
                    <TabContent
                      className={classNames(
                        "__wab_instance",
                        sty.tabContent___6LOii
                      )}
                      tabKey={"tab3"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yrawp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6BbBz
                          )}
                        >
                          {true ? (
                            <PriceBlock
                              data-plasmic-name={"price5"}
                              data-plasmic-override={overrides.price5}
                              className={classNames(
                                "__wab_instance",
                                sty.price5
                              )}
                              isSelected={p.generateStateValueProp($state, [
                                "price5",
                                "isSelected"
                              ])}
                              onIsSelectedChange={p.generateStateOnChangeProp(
                                $state,
                                ["price5", "isSelected"]
                              )}
                              preDay={"折合6.3元每天"}
                              price={"190"}
                              slot={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dkh1C
                                  )}
                                >
                                  {"1个月"}
                                </div>
                              }
                              version={"专业版"}
                            />
                          ) : null}
                          {true ? (
                            <PriceBlock
                              data-plasmic-name={"price6"}
                              data-plasmic-override={overrides.price6}
                              className={classNames(
                                "__wab_instance",
                                sty.price6
                              )}
                              isSelected={p.generateStateValueProp($state, [
                                "price6",
                                "isSelected"
                              ])}
                              onIsSelectedChange={p.generateStateOnChangeProp(
                                $state,
                                ["price6", "isSelected"]
                              )}
                              preDay={"折合5.1元每天"}
                              price={"1824"}
                              version={"专业版"}
                            />
                          ) : null}
                        </div>
                        <Button2
                          data-plasmic-name={"btn3"}
                          data-plasmic-override={overrides.btn3}
                          className={classNames("__wab_instance", sty.btn3)}
                          color={"green"}
                          link={undefined}
                          onClick={async event => {
                            const $steps = {};
                            $steps["updateModalOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "FZw943V7I",
                                        componentUuid: "l2Kc8Ybaed",
                                        argName: "variable"
                                      },
                                      () => ({
                                        objRoot: $state,
                                        variablePath: ["modal", "open"]
                                      })
                                    ),
                                    operation: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "FZw943V7I",
                                        componentUuid: "l2Kc8Ybaed",
                                        argName: "operation"
                                      },
                                      () => 0
                                    ),
                                    value: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "FZw943V7I",
                                        componentUuid: "l2Kc8Ybaed",
                                        argName: "value"
                                      },
                                      () => true
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "FZw943V7I",
                                      componentUuid: "l2Kc8Ybaed"
                                    },
                                    () =>
                                      (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;
                                        p.set(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["updateModalOpen"] === "object" &&
                              typeof $steps["updateModalOpen"].then ===
                                "function"
                            ) {
                              $steps["updateModalOpen"] =
                                await __wrapUserPromise(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "updateVariable",
                                    interactionUuid: "FZw943V7I",
                                    componentUuid: "l2Kc8Ybaed"
                                  },
                                  $steps["updateModalOpen"]
                                );
                            }
                          }}
                        >
                          {"确认并支付"}
                        </Button2>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mYsq
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eVxEw
                              )}
                            >
                              <PriceIcons
                                data-plasmic-name={"icon5"}
                                data-plasmic-override={overrides.icon5}
                                className={classNames(
                                  "__wab_instance",
                                  sty.icon5
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__as3C
                                )}
                              >
                                {"300k字/月"}
                              </div>
                            </p.Stack>
                          ) : null}
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__sIn6A
                              )}
                            >
                              <PriceIcons
                                data-plasmic-name={"icon6"}
                                data-plasmic-override={overrides.icon6}
                                className={classNames(
                                  "__wab_instance",
                                  sty.icon6
                                )}
                              >
                                <Icon27Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__hf009
                                  )}
                                  role={"img"}
                                />
                              </PriceIcons>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qwUxm
                                )}
                              >
                                {"所有高级版功能"}
                              </div>
                            </p.Stack>
                          ) : null}
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__sUkS7
                              )}
                            >
                              <PriceIcons
                                data-plasmic-name={"icon13"}
                                data-plasmic-override={overrides.icon13}
                                className={classNames(
                                  "__wab_instance",
                                  sty.icon13
                                )}
                              >
                                <Icon32Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__vifXb
                                  )}
                                  role={"img"}
                                />
                              </PriceIcons>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__avz3I
                                )}
                              >
                                {"专用问答"}
                              </div>
                            </p.Stack>
                          ) : null}
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xpINl
                              )}
                            >
                              <PriceIcons
                                data-plasmic-name={"icon14"}
                                data-plasmic-override={overrides.icon14}
                                className={classNames(
                                  "__wab_instance",
                                  sty.icon14
                                )}
                              >
                                <Icon31Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__uJp8
                                  )}
                                  role={"img"}
                                />
                              </PriceIcons>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rzVx
                                )}
                              >
                                {"高级实用模版"}
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                      </div>
                    </TabContent>
                  </div>
                ) : null}
              </div>
            )}
          </ph.DataCtxReader>
        </TabsContainer>
      </TabContent>
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens
        )}
        footer={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__x1GWq
            )}
          >
            {"选择后将跳转支付"}
          </div>
        }
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={p.generateStateOnChangeProp($state, ["modal", "open"])}
        open={p.generateStateValueProp($state, ["modal", "open"])}
        title={"选择支付方式"}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qChkw)}
        >
          {true ? (
            <Button2
              data-plasmic-name={"aliPayBtn"}
              data-plasmic-override={overrides.aliPayBtn}
              className={classNames("__wab_instance", sty.aliPayBtn)}
              color={"blue"}
            >
              {"支付宝支付"}
            </Button2>
          ) : null}
          <Button2
            data-plasmic-name={"wechatPayBtn"}
            data-plasmic-override={overrides.wechatPayBtn}
            className={classNames("__wab_instance", sty.wechatPayBtn)}
            color={"green"}
          >
            {"微 信 支 付"}
          </Button2>
        </p.Stack>
      </AntdModal>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  payPanel: [
    "payPanel",
    "tabsContainer",
    "tabUnderline",
    "price1",
    "price2",
    "btn1",
    "icon",
    "icon7",
    "icon8",
    "icon2",
    "icon9",
    "icon10",
    "price5",
    "price6",
    "btn3",
    "icon5",
    "icon6",
    "icon13",
    "icon14",
    "modal",
    "aliPayBtn",
    "wechatPayBtn"
  ],

  tabsContainer: [
    "tabsContainer",
    "tabUnderline",
    "price1",
    "price2",
    "btn1",
    "icon",
    "icon7",
    "icon8",
    "icon2",
    "icon9",
    "icon10",
    "price5",
    "price6",
    "btn3",
    "icon5",
    "icon6",
    "icon13",
    "icon14"
  ],

  tabUnderline: ["tabUnderline"],
  price1: ["price1"],
  price2: ["price2"],
  btn1: ["btn1"],
  icon: ["icon"],
  icon7: ["icon7"],
  icon8: ["icon8"],
  icon2: ["icon2"],
  icon9: ["icon9"],
  icon10: ["icon10"],
  price5: ["price5"],
  price6: ["price6"],
  btn3: ["btn3"],
  icon5: ["icon5"],
  icon6: ["icon6"],
  icon13: ["icon13"],
  icon14: ["icon14"],
  modal: ["modal", "aliPayBtn", "wechatPayBtn"],
  aliPayBtn: ["aliPayBtn"],
  wechatPayBtn: ["wechatPayBtn"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPayItems__ArgProps,
          internalVariantPropNames: PlasmicPayItems__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPayItems__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "payPanel") {
    func.displayName = "PlasmicPayItems";
  } else {
    func.displayName = `PlasmicPayItems.${nodeName}`;
  }
  return func;
}

export const PlasmicPayItems = Object.assign(
  // Top-level PlasmicPayItems renders the root element
  makeNodeComponent("payPanel"),
  {
    // Helper components rendering sub-elements
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    price1: makeNodeComponent("price1"),
    price2: makeNodeComponent("price2"),
    btn1: makeNodeComponent("btn1"),
    icon: makeNodeComponent("icon"),
    icon7: makeNodeComponent("icon7"),
    icon8: makeNodeComponent("icon8"),
    icon2: makeNodeComponent("icon2"),
    icon9: makeNodeComponent("icon9"),
    icon10: makeNodeComponent("icon10"),
    price5: makeNodeComponent("price5"),
    price6: makeNodeComponent("price6"),
    btn3: makeNodeComponent("btn3"),
    icon5: makeNodeComponent("icon5"),
    icon6: makeNodeComponent("icon6"),
    icon13: makeNodeComponent("icon13"),
    icon14: makeNodeComponent("icon14"),
    modal: makeNodeComponent("modal"),
    aliPayBtn: makeNodeComponent("aliPayBtn"),
    wechatPayBtn: makeNodeComponent("wechatPayBtn"),
    // Metadata about props expected for PlasmicPayItems
    internalVariantProps: PlasmicPayItems__VariantProps,
    internalArgProps: PlasmicPayItems__ArgProps
  }
);

export default PlasmicPayItems;
/* prettier-ignore-end */
