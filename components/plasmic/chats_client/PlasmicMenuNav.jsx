// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: 9cR2sxpykRjad
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Menu from "antd/lib/menu/index"; // plasmic-import: Iz_hLKpHZDg/codeComponent
import MenuItem from "antd/lib/menu/MenuItem"; // plasmic-import: HZ6EmQgIQJr/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicMenuNav.module.css"; // plasmic-import: 9cR2sxpykRjad/css
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: r5eJtG3OF3/icon

export const PlasmicMenuNav__VariantProps = new Array();

export const PlasmicMenuNav__ArgProps = new Array("selected");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuNav__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          selected: "menuItemKey1,menuItemKey2,menuItemKey3,menuItemKey4"
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__t2X4N)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            hasGap={true}
            className={classNames(projectcss.all, sty.header)}
            onClick={async event => {
              const $steps = {};
              $steps["goToHomepage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "navigation",
                          interactionUuid: "c3G1bE_FZ",
                          componentUuid: "9cR2sxpykRjad",
                          argName: "destination"
                        },
                        () => `/`
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "navigation",
                        interactionUuid: "c3G1bE_FZ",
                        componentUuid: "9cR2sxpykRjad"
                      },
                      () =>
                        (({ destination }) => {
                          __nextRouter?.push(destination);
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "navigation",
                    interactionUuid: "c3G1bE_FZ",
                    componentUuid: "9cR2sxpykRjad"
                  },
                  $steps["goToHomepage"]
                );
              }
            }}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"26px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/chats_client/images/logoOnlypng2.png",
                fullWidth: 76,
                fullHeight: 80,
                aspectRatio: undefined
              }}
            />

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gg86G)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ic8OF
                  )}
                >
                  {"机智桔子"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pXwwu
                  )}
                >
                  {"Beta版"}
                </div>
              </p.Stack>
            ) : null}
          </p.Stack>
        </div>
      ) : null}
      <Menu
        data-plasmic-name={"menu"}
        data-plasmic-override={overrides.menu}
        className={classNames("__wab_instance", sty.menu)}
        defaultSelectedKeys={args.selected}
        expandIcon={null}
        forceSubMenuRender={false}
        mode={"horizontal"}
        overflowedIndicator={
          <Icon13Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        }
        selectable={false}
        triggerSubMenuAction={"hover"}
      >
        <MenuItem
          data-plasmic-name={"menu1"}
          data-plasmic-override={overrides.menu1}
          className={classNames("__wab_instance", sty.menu1)}
          key={"menuItemKey1"}
          title={"01"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yXmqT
            )}
            onClick={async event => {
              const $steps = {};
              $steps["goToWorkspaces"] = true
                ? (() => {
                    const actionArgs = {
                      destination: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "navigation",
                          interactionUuid: "8MqZUpxfB",
                          componentUuid: "9cR2sxpykRjad",
                          argName: "destination"
                        },
                        () => `/workspaces`
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "navigation",
                        interactionUuid: "8MqZUpxfB",
                        componentUuid: "9cR2sxpykRjad"
                      },
                      () =>
                        (({ destination }) => {
                          __nextRouter?.push(destination);
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["goToWorkspaces"] === "object" &&
                typeof $steps["goToWorkspaces"].then === "function"
              ) {
                $steps["goToWorkspaces"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "navigation",
                    interactionUuid: "8MqZUpxfB",
                    componentUuid: "9cR2sxpykRjad"
                  },
                  $steps["goToWorkspaces"]
                );
              }
            }}
          >
            {"我的工作台"}
          </div>
        </MenuItem>
        <MenuItem
          data-plasmic-name={"menu2"}
          data-plasmic-override={overrides.menu2}
          className={classNames("__wab_instance", sty.menu2)}
          key={"menuItemKey2"}
          title={"02"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eePdL
            )}
            onClick={async event => {
              const $steps = {};
              $steps["goToMydocuments"] = true
                ? (() => {
                    const actionArgs = {
                      destination: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "navigation",
                          interactionUuid: "m1V620vzk",
                          componentUuid: "9cR2sxpykRjad",
                          argName: "destination"
                        },
                        () => `/mydocuments`
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "navigation",
                        interactionUuid: "m1V620vzk",
                        componentUuid: "9cR2sxpykRjad"
                      },
                      () =>
                        (({ destination }) => {
                          __nextRouter?.push(destination);
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["goToMydocuments"] === "object" &&
                typeof $steps["goToMydocuments"].then === "function"
              ) {
                $steps["goToMydocuments"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "navigation",
                    interactionUuid: "m1V620vzk",
                    componentUuid: "9cR2sxpykRjad"
                  },
                  $steps["goToMydocuments"]
                );
              }
            }}
          >
            {"我的文档"}
          </div>
        </MenuItem>
        <MenuItem
          data-plasmic-name={"menu3"}
          data-plasmic-override={overrides.menu3}
          className={classNames("__wab_instance", sty.menu3)}
          danger={false}
          key={"menuItemKey3"}
          title={"03"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zzTgz
            )}
            onClick={async event => {
              const $steps = {};
              $steps["goToMyaccount"] = true
                ? (() => {
                    const actionArgs = {
                      destination: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "navigation",
                          interactionUuid: "RH5n_3Hkr",
                          componentUuid: "9cR2sxpykRjad",
                          argName: "destination"
                        },
                        () => `/myaccount`
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "navigation",
                        interactionUuid: "RH5n_3Hkr",
                        componentUuid: "9cR2sxpykRjad"
                      },
                      () =>
                        (({ destination }) => {
                          __nextRouter?.push(destination);
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["goToMyaccount"] === "object" &&
                typeof $steps["goToMyaccount"].then === "function"
              ) {
                $steps["goToMyaccount"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "navigation",
                    interactionUuid: "RH5n_3Hkr",
                    componentUuid: "9cR2sxpykRjad"
                  },
                  $steps["goToMyaccount"]
                );
              }
            }}
          >
            {"我的账户"}
          </div>
        </MenuItem>
        <MenuItem
          data-plasmic-name={"menu4"}
          data-plasmic-override={overrides.menu4}
          className={classNames("__wab_instance", sty.menu4)}
          key={"menuItemKey4"}
          title={"04"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cQloA
            )}
            onClick={async event => {
              const $steps = {};
              $steps["goToShop"] = true
                ? (() => {
                    const actionArgs = {
                      destination: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "navigation",
                          interactionUuid: "5nKh6-jt2",
                          componentUuid: "9cR2sxpykRjad",
                          argName: "destination"
                        },
                        () => `/shop`
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "navigation",
                        interactionUuid: "5nKh6-jt2",
                        componentUuid: "9cR2sxpykRjad"
                      },
                      () =>
                        (({ destination }) => {
                          __nextRouter?.push(destination);
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["goToShop"] === "object" &&
                typeof $steps["goToShop"].then === "function"
              ) {
                $steps["goToShop"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "navigation",
                    interactionUuid: "5nKh6-jt2",
                    componentUuid: "9cR2sxpykRjad"
                  },
                  $steps["goToShop"]
                );
              }
            }}
          >
            {"系统商城"}
          </div>
        </MenuItem>
      </Menu>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "img",
    "menu",
    "svg",
    "menu1",
    "menu2",
    "menu3",
    "menu4"
  ],

  header: ["header", "img"],
  img: ["img"],
  menu: ["menu", "svg", "menu1", "menu2", "menu3", "menu4"],
  svg: ["svg"],
  menu1: ["menu1"],
  menu2: ["menu2"],
  menu3: ["menu3"],
  menu4: ["menu4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMenuNav__ArgProps,
          internalVariantPropNames: PlasmicMenuNav__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuNav__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuNav";
  } else {
    func.displayName = `PlasmicMenuNav.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuNav = Object.assign(
  // Top-level PlasmicMenuNav renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    img: makeNodeComponent("img"),
    menu: makeNodeComponent("menu"),
    svg: makeNodeComponent("svg"),
    menu1: makeNodeComponent("menu1"),
    menu2: makeNodeComponent("menu2"),
    menu3: makeNodeComponent("menu3"),
    menu4: makeNodeComponent("menu4"),
    // Metadata about props expected for PlasmicMenuNav
    internalVariantProps: PlasmicMenuNav__VariantProps,
    internalArgProps: PlasmicMenuNav__ArgProps
  }
);

export default PlasmicMenuNav;
/* prettier-ignore-end */
