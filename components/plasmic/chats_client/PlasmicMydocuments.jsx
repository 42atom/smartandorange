// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: EKtCmtXn8XaxGh
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavMenu from "../../NavMenu"; // plasmic-import: 9cR2sxpykRjad/component
import { AntdMenu } from "@plasmicpkgs/antd5/skinny/registerMenu"; // plasmic-import: fo-n3xHvdqt/codeComponent
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu"; // plasmic-import: QSmezaW-Gyu/codeComponent
import { AntdMenuDivider } from "@plasmicpkgs/antd5/skinny/registerMenu"; // plasmic-import: pwJcAbVYC4M/codeComponent
import { AntdMenuItemGroup } from "@plasmicpkgs/antd5/skinny/registerMenu"; // plasmic-import: 6ySly9jzXsR/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: -yvQMrhCsV3Q78/component
import DocumentList from "../../DocumentList"; // plasmic-import: DuwZXCRDJh/component
import Toolbar from "../../Toolbar"; // plasmic-import: UlyQXoohOO/component
import { useScreenVariants as useScreenVariantsnl9I0Oib3VOwY } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nl9_I0oib3VOwY/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicMydocuments.module.css"; // plasmic-import: EKtCmtXn8XaxGh/css
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: XtoxUOCTka/icon
import ChevronDownsvgIcon from "./icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: S8FNX_2RcWwpyX/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: dkiK7MvBVR/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: -3MO1z6kLjeMH2/icon

export const PlasmicMydocuments__VariantProps = new Array();

export const PlasmicMydocuments__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMydocuments__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "search.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "docTxt.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "嘿！各位亲亲粉丝们，我又来了！今天我们要来聊一聊一个冬季必备单品——苏特儿牌羊绒大衣！啵儿，听着名字就觉得暖暖的~首先得说一句，这衣服Diao炸了！用的是顶级羊绒材料，毛茸茸的手感真的超好！大衣的设计也非常时尚，穿起来还能显瘦，女孩们小细腰儿也能展现出来！男孩们更不要错过此物，给心爱的女孩送一个苏特儿牌羊绒大衣，保证她对你更加痴迷！再说一下这大衣的保暖能力，呼呼，真的暖到爆炸啊！穿在身上，就像有一床暖暖的被窝裹着一样，什么寒冷都不怕啦！这个冬季不来一件苏特儿牌羊绒大衣，你都不好意思说自己走过！小伙伴们，现在是享受冬日温暖最棒的方法——苏特儿牌羊绒大衣！抓紧时间把它买回家吧！"
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnl9I0Oib3VOwY()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicMydocuments.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMydocuments.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMydocuments.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___0HU07)}>
              <NavMenu
                data-plasmic-name={"navMenu"}
                data-plasmic-override={overrides.navMenu}
                className={classNames("__wab_instance", sty.navMenu)}
                menu2={true}
                menu3={false}
              />
            </div>
          ) : null}
          <section
            data-plasmic-name={"bkgd"}
            data-plasmic-override={overrides.bkgd}
            className={classNames(projectcss.all, sty.bkgd)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__te5Fk)}
            >
              <AntdMenu
                data-plasmic-name={"sideTagsMenu"}
                data-plasmic-override={overrides.sideTagsMenu}
                className={classNames("__wab_instance", sty.sideTagsMenu)}
                expandIcon={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__wBfvr)}
                    role={"img"}
                  />
                }
                mode={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "vertical"
                    : undefined
                }
                triggerSubMenuAction={"click"}
              >
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__x5N3V)}
                  key={"menuItemKey0"}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mVAe1)}
                    >
                      {true ? (
                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__gCsJj)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mGkpg
                        )}
                      >
                        {"收藏文档"}
                      </div>
                    </p.Stack>
                  ) : null}
                </AntdMenuItem>
                <AntdMenuDivider
                  data-plasmic-name={"menuDivider"}
                  data-plasmic-override={overrides.menuDivider}
                  className={classNames("__wab_instance", sty.menuDivider)}
                />

                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__shbVw)}
                  key={"menuItemKey1"}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fVjZb)}
                    >
                      {true ? (
                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__hAsuD)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mlS4O
                        )}
                      >
                        {"今天"}
                      </div>
                    </p.Stack>
                  ) : null}
                </AntdMenuItem>
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__pHCet)}
                  key={"menuItemKey2"}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__lixvZ)}
                    >
                      {true ? (
                        <Icon16Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___9Ckdx
                          )}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ouVxl
                        )}
                      >
                        {"最近3天"}
                      </div>
                    </p.Stack>
                  ) : null}
                </AntdMenuItem>
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__jgPi5)}
                  key={"menuItemKey3"}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hk1Ui)}
                    >
                      {true ? (
                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__tkObm)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lxfI
                        )}
                      >
                        {"最近1周"}
                      </div>
                    </p.Stack>
                  ) : null}
                </AntdMenuItem>
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__fjz2D)}
                  key={"menuItemKey4"}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wCqRo)}
                    >
                      {true ? (
                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__ujpqA)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y9OyE
                        )}
                      >
                        {"最近1月"}
                      </div>
                    </p.Stack>
                  ) : null}
                </AntdMenuItem>
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem___942At)}
                  key={"menuItemKey5"}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yEtc1)}
                    >
                      {true ? (
                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__j6H6R)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gExpa
                        )}
                      >
                        {"全部"}
                      </div>
                    </p.Stack>
                  ) : null}
                </AntdMenuItem>
              </AntdMenu>
              {true ? (
                <AntdMenu
                  data-plasmic-name={"menu"}
                  data-plasmic-override={overrides.menu}
                  className={classNames("__wab_instance", sty.menu)}
                  expandIcon={
                    <Icon10Icon
                      className={classNames(projectcss.all, sty.svg__tB6O8)}
                      role={"img"}
                    />
                  }
                  mode={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "horizontal"
                      : "vertical"
                  }
                  multiple={false}
                >
                  <AntdMenuItemGroup
                    data-plasmic-name={"itemGroup"}
                    data-plasmic-override={overrides.itemGroup}
                    className={classNames("__wab_instance", sty.itemGroup)}
                    title={
                      (
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__llNth
                          )}
                        >
                          {"时间"}
                        </div>
                      ) : null
                    }
                  >
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__rLiC3
                      )}
                      key={"doc1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__alE0
                        )}
                      >
                        {"收藏"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__rHqwZ
                      )}
                      key={"doc2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jiH4S
                        )}
                      >
                        {"最近三天"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__l38Zo
                      )}
                      key={"doc3"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xZy9L
                        )}
                      >
                        {"最近一周"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__xpdE
                      )}
                      key={"doc4"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yd6Wg
                        )}
                      >
                        {"最近一月"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__wdUnw
                      )}
                      key={"doc5"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pOim
                        )}
                      >
                        {"最近半年"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__p2CGa
                      )}
                      key={"doc6"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cizFc
                        )}
                      >
                        {"全部"}
                      </div>
                    </AntdMenuItem>
                  </AntdMenuItemGroup>
                </AntdMenu>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__cmzPo)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__z6B9T)}
                  >
                    <TextInput
                      data-plasmic-name={"search"}
                      data-plasmic-override={overrides.search}
                      className={classNames("__wab_instance", sty.search)}
                      name={"search"}
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "search",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"搜索关键字"}
                      showStartIcon={true}
                      startIcon={
                        true ? (
                          <SearchsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fwHnb
                            )}
                            role={"img"}
                          />
                        ) : null
                      }
                      value={
                        p.generateStateValueProp($state, ["search", "value"]) ??
                        ""
                      }
                    />

                    {true ? (
                      <div
                        data-plasmic-name={"docsWrap"}
                        data-plasmic-override={overrides.docsWrap}
                        className={classNames(projectcss.all, sty.docsWrap)}
                      >
                        <DocumentList
                          data-plasmic-name={"documentList"}
                          data-plasmic-override={overrides.documentList}
                          className={classNames(
                            "__wab_instance",
                            sty.documentList
                          )}
                        />
                      </div>
                    ) : null}
                  </p.Stack>
                  <textarea
                    data-plasmic-name={"docTxt"}
                    data-plasmic-override={overrides.docTxt}
                    className={classNames(
                      projectcss.all,
                      projectcss.textarea,
                      sty.docTxt
                    )}
                    onChange={e => {
                      p.generateStateOnChangeProp($state, ["docTxt", "value"])(
                        e.target.value
                      );
                    }}
                    ref={ref => {
                      $refs["docTxt"] = ref;
                    }}
                    value={
                      p.generateStateValueProp($state, ["docTxt", "value"]) ??
                      ""
                    }
                  />
                </div>
              ) : null}
            </p.Stack>
          </section>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <Toolbar
              data-plasmic-name={"toolbar"}
              data-plasmic-override={overrides.toolbar}
              className={classNames("__wab_instance", sty.toolbar)}
              tab2={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              tab3={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : undefined
              }
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navMenu",
    "bkgd",
    "sideTagsMenu",
    "menuDivider",
    "menu",
    "itemGroup",
    "search",
    "docsWrap",
    "documentList",
    "docTxt",
    "toolbar"
  ],

  navMenu: ["navMenu"],
  bkgd: [
    "bkgd",
    "sideTagsMenu",
    "menuDivider",
    "menu",
    "itemGroup",
    "search",
    "docsWrap",
    "documentList",
    "docTxt"
  ],

  sideTagsMenu: ["sideTagsMenu", "menuDivider"],
  menuDivider: ["menuDivider"],
  menu: ["menu", "itemGroup"],
  itemGroup: ["itemGroup"],
  search: ["search"],
  docsWrap: ["docsWrap", "documentList"],
  documentList: ["documentList"],
  docTxt: ["docTxt"],
  toolbar: ["toolbar"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMydocuments__ArgProps,
          internalVariantPropNames: PlasmicMydocuments__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMydocuments__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMydocuments";
  } else {
    func.displayName = `PlasmicMydocuments.${nodeName}`;
  }
  return func;
}

export const PlasmicMydocuments = Object.assign(
  // Top-level PlasmicMydocuments renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navMenu: makeNodeComponent("navMenu"),
    bkgd: makeNodeComponent("bkgd"),
    sideTagsMenu: makeNodeComponent("sideTagsMenu"),
    menuDivider: makeNodeComponent("menuDivider"),
    menu: makeNodeComponent("menu"),
    itemGroup: makeNodeComponent("itemGroup"),
    search: makeNodeComponent("search"),
    docsWrap: makeNodeComponent("docsWrap"),
    documentList: makeNodeComponent("documentList"),
    docTxt: makeNodeComponent("docTxt"),
    toolbar: makeNodeComponent("toolbar"),
    // Metadata about props expected for PlasmicMydocuments
    internalVariantProps: PlasmicMydocuments__VariantProps,
    internalArgProps: PlasmicMydocuments__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "我的文档",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMydocuments;
/* prettier-ignore-end */
