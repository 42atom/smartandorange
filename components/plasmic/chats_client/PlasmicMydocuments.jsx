// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gRaosoDicn4VUCndSzazbA
// Component: EKtCmtXn8XaxGh
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { useDependencyAwareQuery } from "@plasmicapp/react-web/lib/data-sources";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import MenuNav from "../../MenuNav"; // plasmic-import: 9cR2sxpykRjad/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_chats_client.module.css"; // plasmic-import: gRaosoDicn4VUCndSzazbA/projectcss
import sty from "./PlasmicMydocuments.module.css"; // plasmic-import: EKtCmtXn8XaxGh/css

export const PlasmicMydocuments__VariantProps = new Array();

export const PlasmicMydocuments__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMydocuments__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  useDependencyAwareQuery({
    name: "query",
    getDataOp: () => ({
      sourceId: "9m6seF9rffTwqmNeTPj4dy",
      opId: "76d162da-e80e-4bfc-82eb-27018f41acaf",
      userArgs: {},
      cacheKey: "plasmic.$._lwagLY6N8-AXC.$.",
      invalidatedKeys: ["plasmic_refresh_all"],
      roleId: null
    }),
    $queries,
    setDollarQueries
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicMydocuments.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMydocuments.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMydocuments.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <MenuNav
                data-plasmic-name={"menuNav"}
                data-plasmic-override={overrides.menuNav}
                className={classNames("__wab_instance", sty.menuNav)}
                selected={["menuItemKey2"]}
              />
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "menuNav"],
  freeBox: ["freeBox", "menuNav"],
  menuNav: ["menuNav"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMydocuments__ArgProps,
          internalVariantPropNames: PlasmicMydocuments__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMydocuments__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMydocuments";
  } else {
    func.displayName = `PlasmicMydocuments.${nodeName}`;
  }
  return func;
}

export const PlasmicMydocuments = Object.assign(
  // Top-level PlasmicMydocuments renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    menuNav: makeNodeComponent("menuNav"),
    // Metadata about props expected for PlasmicMydocuments
    internalVariantProps: PlasmicMydocuments__VariantProps,
    internalArgProps: PlasmicMydocuments__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "会员管理",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMydocuments;
/* prettier-ignore-end */
